{
    "content/configuration/configuration.html":  {
                                                     "href":  "content/configuration/configuration.html",
                                                     "title":  "Configuration",
                                                     "keywords":  "Configuration PI Adapter for Modbus TCP provides configuration of data source and data selection. The examples in the configuration topics use curl , a commonly available tool on both Windows and Linux. You can configure the adapter with any programming language or tool that supports making REST calls or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation . To validate successful configurations, you can perform data retrieval ( GET commands) with a browser, if available, on your device. For more information on PI Adapter configuration tools, see Configuration tools . Quick start This Quick Start guides you through setup of each configuration file available for PI Adapter for Modbus TCP. As you complete each step, perform each required configuration to establish a data flow from a data source to one or more endpoints. Some configurations are optional. Important: If you want to complete the optional configurations, complete those tasks before the required tasks. Configure one or several Modbus TCP system components. See System components . Configure a Modbus TCP data source for each Modbus TCP device. See Data source . Optional : Configure schedules. See Schedules . Configure a Modbus TCP data selection for each Modbus TCP data source. See Data selection . Optional : Configure data filters, diagnostics and metadata, buffering, and logging. See the following topics: Data filters Diagnostics and metadata Buffering Logging Configure one or several egress and health endpoints. See Egress endpoints and Health endpoints ."
                                                 },
    "content/configuration/configuration-examples.html":  {
                                                              "href":  "content/configuration/configuration-examples.html",
                                                              "title":  "Configuration examples",
                                                              "keywords":  "Configuration examples The following tables provide examples for all configurations available for PI Adapter for Modbus TCP. Note: The examples in this topic are using the default port number 5590 . If you selected a different port number, replace it with that value. System components configuration with two Modbus TCP adapter instances [ { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" }, { \"ComponentId\": \"Modbus2\", \"ComponentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] Modbus adapter configuration { \"Modbus1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\", \"Port\": 502 }, { \"Id\": \"Device2\", \"IpAddress\": \"127.0.0.2\", \"Port\": 502 }, { \"Id\": \"Device3\", \"IpAddress\": \"127.0.0.3\", \"Port\": 502 } ], \"StreamIdPrefix\": \"my.prefix\", \"DefaultStreamIdPattern\": \"{DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset}\", \"ReconnectInterval\": \"00:00:01\", \"RequestTimeout\": \"00:00:10\", \"DelayBetweenRequests\": \"00:00:00.5\", \"MaxResponseDataLength\": 125 }, \"DataSelection\": [ { \"DeviceId\" : \"Device1\", \"Selected\": true, \"Name\": \"MyDataItem\", \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 123, \"DataTypeCode\": 20, \"ScheduleId\": \"Schedule1\", \"StreamId\": \"stream.1\", \"BitMap\": \"020301\", \"ConversionFactor\": 12.3, \"ConversionOffset\": 14.5, \"DataFilterId\" : \"DataFilter1\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus1\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Buffers\", \"C: ProgramData OSIsoft Adapters Modbus Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"https:  PIWEBAPIServer piwebapi omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"https:  OCSEndpoint omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ] } } Data source configuration The following are representations of minimal and complete data source configurations of Modbus TCP adapter. Minimal data source configuration { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\" } ] } Complete data source configuration { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\", \"Port\": 502 }, { \"Id\": \"Device2\", \"IpAddress\": \"127.0.0.2\", \"Port\": 502 }, { \"Id\": \"Device3\", \"IpAddress\": \"127.0.0.3\", \"Port\": 502 } ], \"StreamIdPrefix\": \"my.prefix\", \"DefaultStreamIdPattern\": \"{DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset}\", \"ReconnectInterval\": \"00:00:01\", \"RequestTimeout\": \"00:00:10\", \"DelayBetweenRequests\": \"00:00:00.5\", \"MaxResponseDataLength\": 125 } Data selection configuration The following are representations of minimal and complete data selection configurations of Modbus TCP adapter. Minimal data selection configuration [ { \"DeviceId\" : \"Device1\", \"Selected\" : true, \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 122, \"DataTypeCode\": 20, \"ScheduleId\": \"Schedule1\" } ] Complete data selection configuration [ { \"DeviceId\" : \"Device1\", \"Selected\": true, \"Name\": \"MyDataItem\", \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 123, \"DataTypeCode\": 20, \"ScheduleId\": \"Schedule1\", \"StreamId\": \"stream.1\", \"BitMap\": \"020301\", \"ConversionFactor\": 12.3, \"ConversionOffset\": 14.5, \"DataFilterId\" : \"DataFilter1\" } ]"
                                                          },
    "content/configuration/data-selection.html":  {
                                                      "href":  "content/configuration/data-selection.html",
                                                      "title":  "Data selection",
                                                      "keywords":  "Data selection In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the adapter to collect from the data sources. Configure Modbus TCP data selection Complete the following steps to configure a Modbus TCP data selection. Use the PUT method in conjunction with the api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for a Modbus TCP data selection into the file. For sample JSON, see Modbus TCP data selection examples . Update the example JSON parameters for your environment. For a table of all available parameters, see Modbus TCP data selection parameters . Save the file. For example, as ConfigureDataSelection.json . Open a command line session. Change directory to the location of ConfigureDataSelection.json . Enter the following cURL command (which uses the PUT method) to initialize the data selection configuration. curl -d \"@ConfigureDataSelection.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/Modbus1/DataSelection\" \"http:  localhost:5590 api v1 configuration Modbus1 DataSelection\" Alternatively, use the following edgecmd command: edgecmd -cid Modbus1 set dataselection -file ./ConfigureDataSelection.json . ConfigureDataSelection.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. If you use a component ID other than Modbus1 , update the endpoint with your chosen component ID. For a list of other REST operations you can perform, like updating or deleting a data selection configuration, see REST URLs . Modbus TCP data selection schema The full schema definition for the Modbus data selection configuration is in the Modbus_DataSelection_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\Modbus\\Schemas Linux: /opt/OSIsoft/Adapters/Modbus/Schemas  opt OSIsoft Adapters Modbus Schemas Modbus TCP data selection parameters The following parameters are available to configure a Modbus TCP data selection: Parameter Required Type Description DeviceId Required string Specifies the DataSource device that this data selection item is read from. The value must match one of the \u003cId\u003e values specified in the DataSource Devices configuration. Selected Optional boolean Selects or clears a measurement. To select an item, set to true . To remove an item, leave the field empty or set to false . Allowed value: true or false Default value: true Name Optional string The optional friendly name of the data item collected from the data source. Default value: stream ID UnitId Required number Modbus TCP slave device unit ID. Minimum value: 0 Maximum value: 247 RegisterType Required number or string Modbus TCP register type. Supported types are Coil , Discrete , Input16 , and Holding16 . Input16 and Holding16 are used to read registers that have a size of 16 bits. To represent the types, you can type in the register type ID or the exact name: Allowed values: 1 or Coil (Read Coil Status) 2 or Discrete (Read Discrete Input Status) 3 or Holding16 (Read 16-bit Holding Registers) 6 or Input16 (Read 16-bit Input Registers) For more information, see Register types . RegisterOffset Required number or string The 0 relative offset to the starting register for this measurement. For example, if your Holding registers start at base register 40001, the offset to this register is 0. For 40002, the offset to this register is 1. Supported formats: 4 -\u003e treated as 4 \"8\" -\u003e treated as 8 \"0xC\" (case insensitive) -\u003e treated as 12 DataTypeCode Required number An integer representing the data type that the adapter will read starting at the register specified by the offset. Supported data types: 1 = Boolean 10 = Int16 20 = UInt16 30 = Int32 31 = Int32ByteSwap 100 = Float32 101 = Float32ByteSwap 110 = Float64 111 = Float64ByteSwap 1001 - 1250 = String 2001 - 2250 = StringByteSwap ScheduleId Required string The ID of an existing schedule for reading values. BitMap Optional string The bitmap is used to extract and reorder bits from a word register. The format of the bitmap is uuvvwwxxyyzz, where uu, vv, ww, yy, and zz each refer to a single bit. A leading zero is required if the referenced bit is less than 10. The low-order bit is 01 and high-order bit is either 16 or 32. Up to 16 bits can be referenced for a 16-bit word (data types 10 and 20) and up to 32 bits can be referenced for a 32-bit word (data type 30 and 31). The bitmap 0307120802 maps the second bit of the original word to the first bit of the new word, the eighth bit to the second bit, the twelfth bit to the third bit, and so on. The high-order bits of the new word are padded with zeros if they are not specified. ConversionFactor Optional number Use this numerical value to scale the raw response received from the Modbus TCP device. If you specify ConversionFactor, regardless of the specified data type, the value is promoted to a float32 (single) when stored. [Result = (Value /   Conversion Factor)] ConversionOffset Optional number Use this numerical value to apply an offset to the response received from the Modbus TCP device. If you specify ConversionOffset, regardless of the specified data type, the value is promoted to a float32 (single) when stored. [Result = (Value - Conversion Offset)] DataFilterId Optional string The ID of the data filter. Allowed value: any string Default value: null Note: If the specified DataFilterId does not exist, unfiltered data is sent until that DataFilterId is created. StreamID Optional string The custom stream ID that is used to create the streams. If you do not specify the StreamID, the adapter generates a default stream ID based on the measurement configuration. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: /   : ? # [ ] @ ! $ \u0026 \u0027 ( ) \\ * + , ; = % \u003c \u003e or the vertical bar Cannot start or end with a period. Cannot contain consecutive periods. Cannot consist of only periods. The default ID automatically updates when there are changes to the measurement and follows the format of \u003cDeviceId\u003e . \u003cUnitId\u003e . \u003cRegisterType\u003e . \u003cRegisterOffset\u003e . Each JSON object in the file represents a measurement. You can modify the fields in each object to configure the measurement parameters. To add more measurements, you need to create more JSON objects with properly completed fields. Register types Register types are used to configure measurements in Modbus TCP data selection. The adapter supports four register types, corresponding to four function codes (1-4). The following table lists all the register types supported in the adapter. Register Type Register Type Code Description Function Code Coil 1 Read Coil Status 1 Discrete 2 Read Discrete Input Status 2 Holding16 3 Read 16-bit Holding Registers 3 Input16 6 Read 16-bit Input Registers 4 When reading from function codes 1 and 2 , the adapter expects these to be returned as single bits. For function codes 3 and 4 , the adapter expects 16 bits to be returned. DataTypeCode The following tables list all the DataTypeCodes supported in the adapter. DataTypeCode 1 Name Value Type Register Type Meaning Output Type Interface data type code BoolModbus Bool Coil /   Discrete 0=Modbus0 /   1=Modbus1 bool NA DataTypeCode 10 Name Value Type Register Type Meaning Output Type Interface data type code Int16 Int16 Any Read 1 Modbus register 1 and interpret as a 16-bit integer. Bytes [BA] read from the PLC are stored as [AB]. 2 Int16 1 DataTypeCode 20 Name Value Type Register Type Meaning Output Type Interface data type code UInt16 UInt16 Any Read 1 Modbus register 1 and interpret as an unsigned 16-bit integer. Bytes [BA] read from the PLC are stored as [AB]. 2 Int32 11 DataTypeCode 30 Name Value Type Register Type Meaning Output Type Interface data type code Int32 Int32 Holding16 /   Input16 Read 32-bits from the PLC and interpret as a 32-bit integer. Bytes [DCBA] read from the PLC are stored as [ABCD]. 2 Int32 7 DataTypeCode 31 Name Value Type Register Type Meaning Output Type Interface data type code Int32ByteSwap Int32 Holding16 /   Input16 Read 32-bits from the PLC and interpret as a 32-bit integer. Bytes [BADC] read from the PLC are stored as [ABCD]. 2 Int32 7 DataTypeCode 100 Name Value Type Register Type Meaning Output Type Interface data type code Float32 Float32 Holding16 /   Input16 Read 32-bits from the PLC and interpret as a 32-bit float. Bytes [DCBA] read from the PLC are stored as [ABCD]. 2 Float32 6 DataTypeCode 101 Name Value Type Register Type Meaning Output Type Interface data type code Float32ByteSwap Float32 Holding16 /   Input16 Read 32-bits from the PLC and interpret as a 32-bit float. Bytes [BADC] read from the PLC are stored as [ABCD]. 2 Float32 6 DataTypeCode 110 Name Value Type Register Type Meaning Output Type Interface data type code Float64 Float64 Holding16 /   Input16 Read 64-bits from the PLC and interpret as a 64-bit float. Bytes [HGFEDCBA] read from the device are stored as [ABCDEFGH]. 2 Float64 6 DataTypeCode 111 Name Value Type Register Type Meaning Output Type Interface data type code Float64ByteSwap Float64 Holding16 /   Input16 Read 64-bits from the PLC and interpret as a 64-bit float. Bytes [BADCFEHG] read from the device are stored as [ABCDEFGH]. 2 Float64 6 DataTypeCode 1001-1250 Name Value Type Register Type Meaning Output Type Interface data type code String String Holding16 /   Input16 1001 will a 1-character string, 1002 will read a 2-character string, 1003 will read a 3-character string and so on. Bytes [AB] are interpreted as \"AB\". String 101 to 199 DataTypeCode 2001-2250 Name Value Type Register Type Meaning Output Type Interface data type code StringByteSwap String Holding16 /   Input16 2001 will a 1-character string, 2002 will read a 2-character string, 2003 will read a 3-character string and so on. Bytes [BA] are interpreted as \"AB\". String 101 to 199 1 For more information about Modbus TCP registers, see How is data stored in Standard Modbus? (https://www.se.com/us/en/faqs/FA168406/) (https:  www.se.com us en faqs FA168406 ) 2 Bytes are read in reverse order. Modbus TCP data selection examples The following are examples of valid Modbus TCP data selection configurations. Minimal data selection configuration [ { \"DeviceId\" : \"Device1\", \"Selected\" : true, \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 0, \"DataTypeCode\": 10, \"ScheduleId\": \"Schedule1\" }, { \"DeviceId\" : \"Device2\", \"Selected\" : true, \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": \"0x1\", \"DataTypeCode\": 10, \"ScheduleId\": \"Schedule2\" } ] Complete data selection configuration [ { \"DeviceId\" : \"Device1\", \"Selected\": true, \"Name\": \"MyDataItem1\", \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 0, \"DataTypeCode\": 10, \"ScheduleId\": \"Schedule1\", \"StreamId\": \"stream.1\", \"BitMap\": \"020301\", \"ConversionFactor\": 12.3, \"ConversionOffset\": 14.5, \"DataFilterId\" : \"DataFilter1\" }, { \"DeviceId\" : \"Device1\", \"Selected\": true, \"Name\": \"MyDataItem2\", \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": \"0x1\", \"DataTypeCode\": 10, \"ScheduleId\": \"Schedule2\", \"StreamId\": \"stream.2\", \"BitMap\": \"020301\", \"ConversionFactor\": 12.3, \"ConversionOffset\": 14.5, \"DataFilterId\" : \"DataFilter2\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection GET Retrieves the data selection configuration, including all data selection items. api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection PUT Configures or updates the data selection configuration. The adapter starts collecting data for each data selection item when the following conditions are met: ??? The data selection configuration PUT request is received. ??? A data source configuration is active. api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection DELETE Deletes the active data selection configuration. The adapter stops collecting data. api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection PATCH Allows partial updates of configured data selection items. Note: The request must be an array containing one or more data selection items. Each item in the array must include its StreamId . api/v1/configuration/\u003cComponentId\u003e/DataSelection/\u003cStreamId\u003e api v1 configuration \u003cComponentId\u003e DataSelection \u003cStreamId\u003e PUT Updates or creates a new data selection item by StreamId . For new items, the adapter starts collecting data after the request is received. api/v1/configuration/\u003cComponentId\u003e/DataSelection/\u003cStreamId\u003e api v1 configuration \u003cComponentId\u003e DataSelection \u003cStreamId\u003e DELETE Deletes a data selection item from the configuration by StreamId . The adapter stops collecting data for the deleted item. Note: Replace \u003cComponentId\u003e with the Id of your Modbus TCP component. For example, Modbus1 ."
                                                  },
    "content/configuration/data-source.html":  {
                                                   "href":  "content/configuration/data-source.html",
                                                   "title":  "Data source",
                                                   "keywords":  "Data source To use the adapter, you must configure the data source from which it polls data. Configure Modbus TCP data source Complete the following steps to configure a Modbus TCP data source. Use the PUT method in conjunction with the api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for a Modbus TCP data source into the file. For sample JSON, see Modbus TCP data source examples . Update the example JSON parameters for your environment. For a table of all available parameters, see Modbus TCP data source parameters . Save the file. For example, as ConfigureDataSource.json . Open a command line session. Change directory to the location of ConfigureDataSource.json . Enter the following cURL command (which uses the PUT method) to initialize the data source configuration. curl -d \"@ConfigureDataSource.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/Modbus1/DataSource\" \"http:  localhost:5590 api v1 configuration Modbus1 DataSource\" Alternatively, use the following edgecmd command: edgecmd -cid Modbus1 set datasource -file ./ConfigureDataSource.json . ConfigureDataSource.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. If you use a component ID other than Modbus1 , update the endpoint with your chosen component ID. For a list of other REST operations you can perform, like updating or deleting a data source configuration, see REST URLs . Configure data selection. For more information, see PI Adapter for Modbus TCP data selection configuration Modbus TCP data source schema The full schema definition for the Modbus data source configuration is in the Modbus_DataSource_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\Modbus\\Schemas Linux: /opt/OSIsoft/Adapters/Modbus/Schemas  opt OSIsoft Adapters Modbus Schemas Modbus TCP data source parameters The following parameters are available for configuring a Modbus TCP data source. Parameter Required Type Description Devices Required Array of objects List of Modbus devices that this adapter instance reads. All devices read by the adapter share the common configuration defined in this table. For the properties that a device is comprised of, see the Devices table. StreamIdPrefix Optional string Specifies what prefix is used for Stream IDs. The naming convention is {StreamIdPrefix}{StreamId} . An empty string means no prefix will be added to the Stream IDs and names. A null value defaults to ComponentID followed by a period. Example: Modbus1.{DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset} Note: Every time you change the StreamIdPrefix of a configured adapter, for example when you delete and add a data source, you need to restart the adapter for the changes to take place. New streams are created on adapter restart and pre-existing streams are no longer updated. Allowed value: any string Default value: null DefaultStreamIdPattern Optional string Specifies the default stream Id pattern to use. Allowed value: any string Default value: {DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset} . ReconnectInterval Optional string Parameter to specify the TimeSpan to wait before trying to reconnect to the data source when the data source is offline. * Minimum value: 00:00:00.1 Maximum value: 00:00:30 Default value: 00:00:01 RequestTimeout Optional string Parameter to specify the TimeSpan that the adapter waits for a pending request before marking it as timed out and dropping the request. * Minimum value: must be positive Maximum value: 48 hours or 02:00:00:00 Default value: 00:00:10 DelayBetweenRequests Optional string Parameter to specify the minimum TimeSpan between two successive requests sent to the data source. * Minimum value: 00:00:00 Maximum value: 00:00:01 Default value: 00:00:00 MaxResponseDataLength Optional number Parameter to limit the maximum length (in bytes) of data that can be read within one transaction. This feature is provided to support devices that limit the number of bytes that can be returned. If there is no device limitation, the request length should be the maximum length of 250 bytes. Minimum value: 2 Maximum value: 250 Default value: 250 * Note: You can also specify timespans as numbers in seconds. For example, \"RequestTimeout\": 25 specifies 25 seconds, or \"RequestTimeout\": 125.5 specifies 2 minutes and 5.5 seconds. Devices The following parameters are available for configuring the \u0027Devices\u0027 parameter of a Modbus TCP data source. Parameter Required Type Description Id Required string The ID of the device that is used in data selection to associate a register with a device. IpAddress Required string The IP address or hostname of the device from which the data is collected using the Modbus TCP protocol. Port Optional number The TCP port of the target device that listens for and responds to Modbus TCP requests. The value ranges from 0 to 65535 . If you do not configure it, the default TCP port is 502 , which is the default port for Modbus TCP protocol. Modbus TCP data source examples The following are examples of valid Modbus TCP data source configurations: Minimal data source configuration { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\" } ] } Complete data source configuration { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\", \"Port\": 502 }, { \"Id\": \"Device2\", \"IpAddress\": \"127.0.0.2\", \"Port\": 502 }, { \"Id\": \"Device3\", \"IpAddress\": \"127.0.0.3\", \"Port\": 502 } ], \"StreamIdPrefix\": \"my.prefix\", \"DefaultStreamIdPattern\": \"{DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset}\", \"ReconnectInterval\": \"00:00:01\", \"RequestTimeout\": \"00:00:10\", \"DelayBetweenRequests\": \"00:00:00.5\", \"MaxResponseDataLength\": 125 } REST URLs Relative URL HTTP verb Action api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource GET Retrieves the data source configuration. api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource POST Creates the data source configuration. The adapter starts collecting data after the following conditions are met: ??? The data source configuration POST request is received. ??? A data selection configuration is active. api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource PUT Configures or updates the data source configuration. Overwrites any active data source configuration. If no configuration is active, the adapter starts collecting data after the following conditions are met: ??? The data source configuration PUT request is received. ??? A data selection configuration is active. api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource DELETE Deletes the data source configuration. After the request is received, the adapter stops collecting data. Note: Replace \u003cComponentId\u003e with the Id of your Modbus TCP component. For example, Modbus1 ."
                                               },
    "content/configuration/security.html":  {
                                                "href":  "content/configuration/security.html",
                                                "title":  "Security",
                                                "keywords":  "Security When determining Modbus TCP security practices with regards to REST APIs, you should consider the following practice. To keep the adapter secure, only administrators should have access to machines where the adapter is installed. REST APIs are bound to localhost, meaning that only requests coming from within the machine will be accepted. Modbus protocol The Modbus TCP adapter does not currently support transport layer security between the adapter and the data source, which means that Modbus traffic will be unprotected. If needed, use other measures to protect this traffic, such as a VPN connection, air-gapped control network, or SSH tunnel."
                                            },
    "content/configuration/system-components.html":  {
                                                         "href":  "content/configuration/system-components.html",
                                                         "title":  "System components",
                                                         "keywords":  "System components PI adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form where cryptographic key material is stored separately in a secure location. If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system individually using REST, but you can also configure the system as a whole with a single REST call. Configure system components Complete the following steps to configure system components. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/system/components http:  localhost:5590 api v1 configuration system components REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for system components into the file. For sample JSON, see Examples . Update the example JSON parameters for your environment. For a table of all available parameters, see System components parameters . Save the file. For example, as ConfigureComponents.json . Open a command line session. Change directory to the location of ConfigureComponents.json . Enter the following cURL command (which uses the PUT method) to initialize the system components configuration. curl -d \"@ConfigureComponents.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" \"http:  localhost:5590 api v1 configuration system components\" Alternatively, use one of the following edgecmd commands: edgecmd set components -file ./ConfigureComponents.json . ConfigureComponents.json OR # Add modbus component to existing components configuration edgecmd add components -id Modbus1 -type Modbus Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or deleting a system components configuration, see REST URLs . System components schema The full schema definition for the system components configuration is in the System_Components_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas  opt OSIsoft Adapters AdapterName Schemas System components parameters You can configure the following parameters for system components: Parameters Required Type Description ComponentId Required string The ID of the component 1 . It can be any alphanumeric string. A properly configured ComponentID follows these rules: Cannot contain leading or trailing space Cannot use the following characters: \u003e \u003c /   : ? # [ ] @ ! $ \u0026 * \\ \" ( ) \\\\ + , ; = \\| ` { } ComponentType Required string The type of the component. There are two types of components: OmfEgress and the adapter. 1 1 Note: The OmfEgress component is required to run the adapter. Both its ComponentId and ComponentType are reserved and should not be modified. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration with two adapter instances [ { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" }, { \"ComponentId\": \"Modbus2\", \"ComponentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components api v1 configuration system components GET Retrieves the system components configuration api/v1/configuration/system/components api v1 configuration system components POST Adds a new component to the system configuration api/v1/configuration/system/components api v1 configuration system components PUT Updates the system components configuration api/v1/configuration/system/components/ api v1 configuration system components  componentId DELETE Deletes a specific component from the system components configuration Note: All the logs and configurations files for the deleted components are moved to the corresponding logs/Removed logs Removed or Configuration/Removed Configuration Removed folder. api/v1/configuration/system/components/ api v1 configuration system components  componentId PUT Creates a new component with the specified componentId in the system configuration"
                                                     },
    "content/index.html":  {
                               "href":  "content/index.html",
                               "title":  "Overview",
                               "keywords":  "Overview PI Adapter for Modbus TCP is a data-collection component that transfers time-series data from source devices to OMF (OSIsoft Message Format) endpoints in OSIsoft Cloud Services or PI Servers. Modbus TCP is a commonly available communication protocol used for connecting and transmitting information between industrial electronic devices. The adapter can connect to any device that uses the Modbus TCP communication protocol. Adapter installation You can install the adapter with a download kit that you can obtain from the OSIsoft Customer Portal. You can install the adapter on devices running either Windows or Linux operating systems. Adapter configuration Using REST API, you can configure all functions of the adapter. The configurations are stored in JSON files. For data ingress, you must define an adapter component in the system components configuration for each device to which the adapter will connect. You configure each adapter component with the connection information for the device and the data to collect. For data egress, you must specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once you have configured the adapter and it is sending data, you can use administration functions to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. EdgeCmd utility OSIsoft also provides the EdgeCmd utility, a proprietary command line tool to configure and administer an adapter on both Linux and Windows operating systems. EdgeCmd utility is installed separately from the adapter. \u003c!-- # PI Adapter for Modbus TCP ======= - [PI Adapter for Modbus TCP overview](xref:PIAdapterForModbusTCPOverview) - [PI Adapter for Modbus TCP principles of operation](xref:PIAdapterForModbusTCPPrinciplesOfOperation) - [PI Adapter for Modbus TCP supported features](xref:PIAdapterForModbusTCPSupportedFeatures) - [Installation](xref:Installation) - [Install the adapter](xref:InstallTheAdapter) - [Install PI Adapter for Modbus TCP using Docker](xref:InstallPIAdapterForModbusTCPUsingDocker) - [Uninstall the adapter](xref:UninstallTheAdapter) - [Configuration](xref:ModbusConfiguration) - [Configuration tools](xref:ConfigurationTools) - [System components configuration](xref:SystemComponentsConfiguration) - [PI Adapter for Modbus TCP data source configuration](xref:PIAdapterForModbusTCPDataSourceConfiguration) - [PI Adapter for Modbus TCP data selection configuration](xref:PIAdapterForModbusTCPDataSelectionConfiguration) - [Egress endpoints configuration](xref:EgressEndpointsConfiguration) - [Health endpoint configuration](xref:HealthEndpointConfiguration) - [Diagnostics configuration](xref:DiagnosticsConfiguration) - [Buffering configuration](xref:BufferingConfiguration) - [Logging configuration](xref:LoggingConfiguration) - [System and adapter configuration](xref:SystemAndAdapterConfiguration) - [Administration](xref:Administration) - [Start and stop an adapter](xref:StartAndStopAnAdapter) - [Start and stop ingress component](xref:StartAndStopIngressComponent) - [Retrieve product version information](xref:RetrieveProductVersionInformation) - [Delete an adapter component](xref:DeleteAnAdapterComponent) - [Health and diagnostics](xref:HealthAndDiagnostics) - [Adapter health](xref:AdapterHealth) - [Device status](xref:DeviceStatus) - [Next health message expected](xref:NextHealthMessageExpected) - [Adapter diagnostics](xref:AdapterDiagnostics) - [System](xref:System) - [Stream count](xref:StreamCount) - [IO rate](xref:IORate) - [Error rate](xref:ErrorRate) - [Egress diagnostics](xref:EgressDiagnostics) --\u003e"
                           },
    "content/main/shared-content/_includes/inline/component-id.html":  {
                                                                           "href":  "content/main/shared-content/_includes/inline/component-id.html",
                                                                           "title":  "",
                                                                           "keywords":  "Modbus1"
                                                                       },
    "content/main/shared-content/_includes/inline/component-type.html":  {
                                                                             "href":  "content/main/shared-content/_includes/inline/component-type.html",
                                                                             "title":  "",
                                                                             "keywords":  "Modbus1"
                                                                         },
    "content/main/shared-content/_includes/inline/docker-image.html":  {
                                                                           "href":  "content/main/shared-content/_includes/inline/docker-image.html",
                                                                           "title":  "",
                                                                           "keywords":  "modbusadapter"
                                                                       },
    "content/main/shared-content/_includes/inline/framework-version.html":  {
                                                                                "href":  "content/main/shared-content/_includes/inline/framework-version.html",
                                                                                "title":  "",
                                                                                "keywords":  "1.4"
                                                                            },
    "content/main/shared-content/_includes/inline/installer-name.html":  {
                                                                             "href":  "content/main/shared-content/_includes/inline/installer-name.html",
                                                                             "title":  "",
                                                                             "keywords":  "PI-Adapter-for-Modbus_1.3.0.131"
                                                                         },
    "content/main/shared-content/_includes/inline/product-name.html":  {
                                                                           "href":  "content/main/shared-content/_includes/inline/product-name.html",
                                                                           "title":  "",
                                                                           "keywords":  "PI Adapter for Modbus TCP"
                                                                       },
    "content/main/shared-content/_includes/inline/product-protocol.html":  {
                                                                               "href":  "content/main/shared-content/_includes/inline/product-protocol.html",
                                                                               "title":  "",
                                                                               "keywords":  ""
                                                                           },
    "content/main/shared-content/_includes/inline/product-version.html":  {
                                                                              "href":  "content/main/shared-content/_includes/inline/product-version.html",
                                                                              "title":  "",
                                                                              "keywords":  "1.5"
                                                                          },
    "content/main/shared-content/_includes/inline/startup-script.html":  {
                                                                             "href":  "content/main/shared-content/_includes/inline/startup-script.html",
                                                                             "title":  "",
                                                                             "keywords":  "modbusdockerstart.sh"
                                                                         },
    "content/main/shared-content/_includes/inline/symantic-version.html":  {
                                                                               "href":  "content/main/shared-content/_includes/inline/symantic-version.html",
                                                                               "title":  "",
                                                                               "keywords":  "1.3.0.131"
                                                                           },
    "content/main/shared-content/administration/administration.html":  {
                                                                           "href":  "content/main/shared-content/administration/administration.html",
                                                                           "title":  "Administration",
                                                                           "keywords":  "Administration With the PI adapter administration level functions, you can start and stop an adapter service and the individual adapter ingress components. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl , a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure PI adapters with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation . To validate successful configurations, you can accomplish data retrieval steps ( GET commands) using a browser, if available on your device. For more information on PI adapter configuration tools, see Configuration tools ."
                                                                       },
    "content/main/shared-content/administration/delete-an-adapter-component.html":  {
                                                                                        "href":  "content/main/shared-content/administration/delete-an-adapter-component.html",
                                                                                        "title":  "Delete an adapter component",
                                                                                        "keywords":  "Delete an adapter component When you remove an adapter component, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data remain on the respective endpoints. Complete the following steps to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Run a DELETE command to the following endpoint: http://localhost:5590/api/v1/configuration/system/components/\u003cComponentId\u003e http:  localhost:5590 api v1 configuration system components \u003cComponentId\u003e Note: You must make an empty DELETE command against the Id of the component you want to delete. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Delete an adapter component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/\u003cComponentId\u003e\" \"http:  localhost:5590 api v1 configuration system components \u003cComponentId\u003e\" OR edgecmd remove components -id \u003cComponentId\u003e File relocation All configuration and log files are renamed and moved. The files are renamed according to the timestamp of removal, for example, FileName.json_removed_yyyy-MM-dd--hh-mm-ss . Configuration files are moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\Configuration\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/Configuration/Removed  usr share OSIsoft Adapters AdapterName Configuration Removed Log files are moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\Logs\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/Logs/Removed  usr share OSIsoft Adapters AdapterName Logs Removed In the following example, one adapter service is installed on a particular Windows node with the name \u003cAdapter\u003eService1 . An adapter component with the name \u003cAdapter\u003eDeviceX was added and configured to this adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/ api v1 configuration system components  ComponentId DELETE Deletes specified component Note: Replace ComponentId with the Id of the component that you want to delete."
                                                                                    },
    "content/main/shared-content/administration/retrieve-product-version-information.html":  {
                                                                                                 "href":  "content/main/shared-content/administration/retrieve-product-version-information.html",
                                                                                                 "title":  "Retrieve product version information",
                                                                                                 "keywords":  "Retrieve product version information The product version information includes the adapter framework version, application version, the version of the underlying .NET Core framework, and the operating system that the adapter is running on. Complete the following steps to retrieve the product version information of a PI adapter: Use any of the Configuration tools capable of making HTTP requests. Run a GET command to the following endpoint: http://localhost:5590/api/v1/Diagnostics/ProductInformation http:  localhost:5590 api v1 Diagnostics ProductInformation Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Get product information for adapter hosted on port 5590 curl -X GET \"http://localhost:5590/api/v1/Diagnostics/ProductInformation\" \"http:  localhost:5590 api v1 Diagnostics ProductInformation\" OR edgecmd get version Example result: { \"Application Name\": \"PI Adapter for \u003cAdapterName\u003e\", \"Adapter Framework Version\": \"1.3.0.351\", \"Application Version\":\"1.2.0.37\", \".Net Core Version\":\".NET Core 3.1.5\", \"Operating System\":\"Linux 4.15.0-106-generic #107-Ubuntu SMP Thu Jun 4 11:27:52 UTC 2020\" }"
                                                                                             },
    "content/main/shared-content/administration/start-and-stop-an-adapter.html":  {
                                                                                      "href":  "content/main/shared-content/administration/start-and-stop-an-adapter.html",
                                                                                      "title":  "Start and stop an adapter",
                                                                                      "keywords":  "Start and stop an adapter Complete the procedure appropriate for your operating system to start or stop an adapter service: Windows Open Windows services. Select PI Adapter for \u003cAdapterName\u003e . Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following commands: Example: Start PI Adapter for \u003cAdapterName\u003e sudo systemctl start pi.adapter.\u003cadapterName\u003e Example: Stop PI Adapter for \u003cAdapterName\u003e sudo systemctl stop pi.adapter.\u003cadapterName\u003e Press Enter."
                                                                                  },
    "content/main/shared-content/administration/start-and-stop-ingress-component.html":  {
                                                                                             "href":  "content/main/shared-content/administration/start-and-stop-ingress-component.html",
                                                                                             "title":  "Start and stop ingress component",
                                                                                             "keywords":  "Start and stop ingress component To control data ingress, you can start and stop the ingress components of an adapter whenever necessary. By default, all currently configured ingress components are started. Start an ingress component Complete the following steps to start an individual ingress component: Use any of the Configuration tools capable of making HTTP requests. Run a POST command to the following endpoint, replacing \u003cComponentId\u003e with the ingress component that you want to start: http://localhost:5590/api/v1/administration/\u003cComponentId\u003e/Start http:  localhost:5590 api v1 administration \u003cComponentId\u003e Start Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Start the adapter ingress component curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/\u003cComponentId\u003e/Start\" \"http:  localhost:5590 api v1 Administration \u003cComponentId\u003e Start\" Example using edgecmd : edgecmd -cid \u003cComponentId\u003e start Stop an ingress component Complete the following steps to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Run a POST command to the following endpoint, replacing \u003cComponentId\u003e with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/\u003cComponentId\u003e/Stop http:  localhost:5590 api v1 administration \u003cComponentId\u003e Stop Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Stop the adapter ingress component curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/\u003cComponentId\u003e/Stop\" \"http:  localhost:5590 api v1 Administration \u003cComponentId\u003e Stop\" Example using edgecmd : edgecmd -cid \u003cComponentId\u003e stop"
                                                                                         },
    "content/main/shared-content/configuration/buffering.html":  {
                                                                     "href":  "content/main/shared-content/configuration/buffering.html",
                                                                     "title":  "Buffering",
                                                                     "keywords":  "Buffering You can configure PI adapters to buffer data egressed from the adapter to endpoints. Buffering is configured through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless it is necessary. Changes to the buffering configuration parameters only take effect during adapter service startup. Configure buffering Complete the following steps to configure buffering. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/system/buffering http:  localhost:5590 api v1 configuration system buffering REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for buffering into the file. For sample JSON, see Examples - Retrieve the buffering configuration . Update the example JSON parameters for your environment. For a table of all available parameters, see Buffering parameters . Save the file. For example, as ConfigureBuffering.json . Open a command line session. Change directory to the location of ConfigureBuffering.json . Enter the following cURL command (which uses the PUT method) to initialize the buffering configuration. curl -d \"@ConfigureBuffering.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/buffering\" \"http:  localhost:5590 api v1 configuration system buffering\" Alternatively, using edgecmd: edgecmd set buffering -file ./ConfigureBuffering.json . ConfigureBuffering.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or replacing a buffering configuration, see REST URLs . Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas Buffering parameters The following parameters are available for configuring buffering: Parameter Required Type Description EnablePersistentBuffering Optional boolean Enables or disables on-disk buffering Allowed value: true or false Default value: true Note: If you disable persistent buffering, in-memory buffering is used. On-disk and in-memory buffering are limited by value in the MaxBufferSizeMB property. MaxBufferSizeMB Optional integer Defines the maximum size of the buffer that is persisted on disk 1 or used in memory 2 . The unit is specified in MB (1 Megabyte = 1048576 bytes). Consider the capacity and the type of storage medium to determine a suitable value for this parameter. Minimum value: 1 Maximum value: 2147483647 Default value: 1024 Note: The MaxBufferSizeMB property is applied to each configured endpoint. For example, if you set the MaxBufferSizeMB to 1024 and you configured the adapter to send data to two endpoints (for example, PI Server and OCS), the total maximum resources used for buffering will be 2048 . The health endpoint is an exception fixed at 20 MB. BufferLocation Required string Defines the location of the buffer files. Absolute paths are required. Consider the access-control list (ACL) when you set this parameter. BufferLocation is used to buffer files when EnablePersistentBuffering is true . Allowed value: Valid path to a folder location in the file system Default value: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterInstance}\\Buffers Linux: /usr/share/OSIsoft/Adapters/{AdapterInstance}/Buffers  usr share OSIsoft Adapters {AdapterInstance} Buffers 1 Buffering to disk - disk is only used if required; Data is only written to the disk buffer if queued in the memory buffer for more than 5 seconds. The MaxBufferSizeMB is applied per configured endpoint except the health endpoint. An adapter creates 20 MB buffer files that are stored in BufferLocation . When MaxBufferSizeMB is reached, the oldest buffer file is deleted and a new buffer file is created. The health endpoint is fixed at 20 MB. When the health endpoint buffer file becomes full, a new buffer file is created and the previous buffer file is deleted. Note: The following rules apply in case of an error when creating a new buffer file: Attempt to delete oldest buffer file and retry. If unable to buffer, errors are logged to indicate data loss. If a buffer file is corrupted, an attempt is made to recover individual records and any failure to recover records is logged. 2 Buffering only to memory : The MaxBufferSizeMB is applied per configured endpoint except the health endpoint. When MaxBufferSizeMB is reached, the oldest messages in the memory buffer are removed. Depending on the size of a new message, several old messages may be removed. The health endpoint is fixed at 20 MB. When the health endpoint buffer file becomes full, the oldest messages in the memory buffer are removed and new messages are added. Examples The following examples are buffering configurations made through the curl REST client. Retrieve the buffering configuration curl -X GET \"http://localhost:5590/api/v1/configuration/system/buffering\" \"http:  localhost:5590 api v1 configuration system buffering\" OR edgecmd get buffering Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/\u003cAdapterName\u003e/Buffers\", \"C: ProgramData OSIsoft Adapters \u003cAdapterName\u003e Buffers\", \"maxBufferSizeMB\": 1024, \"enablePersistentBuffering\": true } 200 OK response indicates success. Update MaxBufferSizeMb parameter curl -d \"{ \\\"MaxBufferSizeMB\\\": 100 }\" -H \"Content-Type: application/json\" application json\" -X PATCH \"http://localhost:5590/api/v1/configuration/system/buffering\" \"http:  localhost:5590 api v1 configuration system buffering\" OR edgecmd edit buffering -MaxBufferSizeMB 100 204 No Content response indicates success. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/buffering api v1 configuration system buffering GET Gets the buffering configuration api/v1/configuration/system/buffering api v1 configuration system buffering PUT Replaces the existing buffering configuration api/v1/configuration/system/buffering api v1 configuration system buffering PATCH Update parameter, partial configuration"
                                                                 },
    "content/main/shared-content/configuration/client-failover.html":  {
                                                                           "href":  "content/main/shared-content/configuration/client-failover.html",
                                                                           "title":  "Client failover configuration",
                                                                           "keywords":  "Client failover configuration You can configure the adapter for failover by using client failover to register the adapter to a failover group managed by a failover endpoint. When you register the adapter to a failover group it allows the adapter to work with other adapter instances in the group as mutual backups. This minimizes the likelihood of data loss if an adapter in the group goes offline due to incidences like scheduled maintenance or an unexpected power outage. Using client failover, you can do the following: Register the adapter instance to a failover group managed by a failover endpoint. Unregister the adapter instance from a failover group managed by a failover endpoint. Perform runtime failover parameter changes such as the failover mode and failover timeout. Query the current failover state including the failover role, last data process time, failover status and adapter state. Note: Failover group will be created by the adapter if it does not exist on the failover endpoint. Configure client failover Complete the following steps to configure client failover. Using a text editor, create a file that contains the client failover configuration in the JSON format. For sample JSON, see the example client failover configuration . For all available parameters, see the client failover parameters . Save the file. For example, ConfigureClientFailover.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of the file to the following endpoint: https://\u003chostname\u003e:\u003cport\u003e/api/v1/ClientFailover https:  \u003chostname\u003e:\u003cport\u003e api v1 ClientFailover . Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@ConfigureClientFailover.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"https://\u003chostname\u003e:\u003cport\u003e/api/v1/ClientFailover\" \"https:  \u003chostname\u003e:\u003cport\u003e api v1 ClientFailover\" On successful execution, the client failover change takes effect immediately during runtime. Client failover parameters Parameter Required Type Description FailoverGroupId Required string The ID of the failover group to register the adapter instance in Allowed value: any string identifier Default value: null Name Optional string The friendly name of the failover group Allowed value: any string value Default value: null Description Optional string The description of the failover group Allowed value: any string value Default value: null FailoverTimeout Required datetime The failover timeout value of the failover group. This defines how frequently the adapter will send a heartbeat to the failover endpoint. The heartbeat will be sent at every FailoverTimeout /   2 interval Allowed value: a string representation of date time using hh:mm:ss Mode Required string The failover mode of the registered adapter Allowed value: Hot , Warm , Cold For more information, see Failover Modes . Endpoint Required string The URL of a destination that supports client failover registration. Supported destinations include ADH and on-premise Failover Service Allowed value: well-formed http or https endpoint string Default: null UserName Optional string The username used for Basic authentication to on-premise Failover Service endpoint Allowed value: any string Default: null Note: If your username contains a backslash, you must add an escape character, for example, type OilCompany\\TestUser as OilCompany\\\\TestUser . Password Optional string The password used for Basic authentication to on-premise Failover Service endpoint Allowed value: any string or {{\u003csecretId\u003e}} (see Reference Secrets ) Default: null ClientId Required for ADH endpoint string The clientId used for Bearer authentication to ADH endpoint Allowed value: any string, can be null if the endpoint URL schema is HTTP Default: null ClientSecret Required for ADH endpoint string The clientSecret used for Bearer authentication to ADH endpoint Allowed value: any string or {{\u003csecretId\u003e}} (see Reference Secrets ) Default: null TokenEndpoint Optional string An optional token endpoint where the adapter retrieves a bearer token. When null or not specified the adapter uses a well-known Open ID URL to retrieve it Allowed value: well-formed http or https endpoint string Default value: null ValidateEndpointCertificate Optional boolean An optional Boolean flag where, when set to false, the adapter will disable the verification of the server certificate Note: AVEVA strongly recommends only disabling server certificate validation for testing purposes. Allowed value: true or false Default value: true Note: Failover group name, description and failover timeout cannot be changed once created. To change it the group must be deleted on the failover service side. Failover Modes The failover behavior outlined below corresponds to adapter instances with the \u0027Secondary\u0027 failover role. Available failover modes may vary based on adapter. For more information on failover role, see Failover Role . Mode Description Hot When in Hot failover mode, configured components for the Secondary adapter instance start and collect data from the data source. Collected data is buffered into the failover-specific buffer folder until the adapter instance in the Primary role has finished sending data to the destination. Data from the Secondary adapter instance is not egressed to the data endpoint(s). Warm When in Warm failover mode, configured components for the Secondary adapter instance start and connect to the data source but do not collect data from the data source. Since data is not being collected, data is not buffered nor egressed to the data endpoint(s). Cold When in Cold failover mode, none of the configured components for the Secondary adapter instance start. The adapter does not connect to nor collect data from the data source, and data is not egressed to the data endpoint(s). Example client failover configuration The following is an example of a complete client failover configuration. { \"FailoverGroupId\": \"FailoverGroup1\", \"Name\": \"NameExample\", \"Description\": \"DescriptionExample\", \"FailoverTimeout\": \"00:01:00\", \"Mode\": \"hot\", \"Endpoint\": \"http://test-endpoint.com\", \"http:  test-endpoint.com\", \"UserName\": \"UserName1\", \"Password\": \"Password1\", \"TokenEndpoint\": null, \"ValidateEndpointCertificate\": true } Note: When On Demand history recovery is required a new AVEVA Adapter instance should be configured to perform the operation. It isn\u0027t recommended to use On Demand history recovery on an Adapter instance that participates in a failover pair. Query current failover state You can query the current failover state with the adapter\u0027s diagnostics. Follow the instruction below to query the current failover state: Use any of the Configuration tools capable of making HTTP requests to run a GET command to the following endpoint: http://localhost:5590/api/v1/diagnostics/FailoverState http:  localhost:5590 api v1 diagnostics FailoverState . The following is an example of failover state returned from the adapter: { \"Role\": \"Primary\", \"LastDataProcessedTime\": \"2021-01-01T00:00:00\", \"FailoverScore\": \"95\", \"AdapterState\": \"Running\" } Failover Role The current failover Role is determined by the client failover endpoint. The current failover role is visible by querying the failover state, or by looking at the failover status diagnostics streams. For more information on failover status, see Failover Status . Role Description Primary When the adapter is in the Primary role, configured components start, collect, and egress data from the data source to the data endpoint(s). Note: While the adapter is in the Primary role, a change in Mode in the client failover configuration does not affect adapter behavior and data will continue to be egressed. Secondary When the adapter is in the Secondary role, adapter behavior varies based on the failover mode. For more information, see Failover Modes . When an adapter with a valid client failover configuration registers with an endpoint and it is the only adapter registered in the group, it becomes the Primary adapter instance. If the adapter is not the only adapter registered in the client failover group, the Primary adapter instance is that with the highest FailoverScore value. For more information on FailoverScore , see Failover Status . Health If the adapter has health endpoints configured, the client failover configuration values Mode and FailoverGroupId are included in the static failover health data. For more information, see Failover Health . REST URLs Relative URL HTTP verb Action api/v1/configuration/System/ClientFailover api v1 configuration System ClientFailover GET Gets the client failover configuration api/v1/configuration/System/ClientFailover api v1 configuration System ClientFailover DELETE Deletes the client failover configuration api/v1/configuration/System/ClientFailover api v1 configuration System ClientFailover POST Creates a client failover configuration. Fails if the client failover configuration already exists api/v1/configuration/System/ClientFailover api v1 configuration System ClientFailover PATCH Partially updates existing client failover configuration api/v1/configuration/System/ClientFailover api v1 configuration System ClientFailover PUT Replaces the existing client failover configuration api/v1/diagnostics/FailoverState api v1 diagnostics FailoverState GET Get the current failover state"
                                                                       },
    "content/main/shared-content/configuration/configuration-tools.html":  {
                                                                               "href":  "content/main/shared-content/configuration/configuration-tools.html",
                                                                               "title":  "Configuration tools",
                                                                               "keywords":  "Configuration tools You can configure PI adapters with the EdgeCmd utility, OSIsoft\u0027s proprietary tool for configuring adapters, or a commonly-used REST tool. EdgeCmd utility The EdgeCmd utility enables adapter configuration on both Linux and Windows operating systems. For more information on using the EdgeCmd utility, see the EdgeCmd utility documentation . REST tools The following tools are available to make REST calls: curl curl is a command line tool used to make HTTP calls and is supported on both Windows and Linux operating systems. You can script curl with Bash or PowerShell on Linux or Windows and you can use it to perform adapter administrative and programming tasks. curl commands are used in configuration and management examples throughout this document. For more information, see curl (https://curl.haxx.se/) (https:  curl.haxx.se ) . Postman Postman is a REST tool for systems with GUI components. PI adapters are supported on platforms without GUIs. Postman is particularly useful for learning more about PI Adapter REST APIs. For more information, see Postman (https://www.postman.com/) (https:  www.postman.com ) ."
                                                                           },
    "content/main/shared-content/configuration/data-filters.html":  {
                                                                        "href":  "content/main/shared-content/configuration/data-filters.html",
                                                                        "title":  "Data filters",
                                                                        "keywords":  "Data filters PI adapters can be configured to perform data filtering to save network bandwidth. Every data item in the data selection configuration can be assigned the Id of a data filter. The adapter will then filter data for those data items based on the data filter configuration. Note: If data filters are enabled and data quality changes, both the old and current data quality values are passed on. Configure data filters Complete the following steps to configure data filters. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/DataFilters http:  localhost:5590 api v1 configuration \u003cComponentId\u003e DataFilters REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for data filters into the file. For sample JSON, see Data filters example . Update the example JSON parameters for your environment. For a table of all available parameters, see Data filters parameters . Save the file. For example, as ConfigureDataFilters.json . Open a command line session. Change directory to the location of ConfigureDataFilters.json . Enter the following cURL command (which uses the PUT method) to initialize the data filters configuration. curl -d \"@ConfigureDataFilters.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/DataFilters\" \"http:  localhost:5590 api v1 configuration \u003cComponentId\u003e DataFilters\" Alternatively, using edgecmd: edgecmd -cid \u003cComponentId\u003e set datafilters -file ./ConfigureDatafilters.json . ConfigureDatafilters.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or deleting a data filters configuration, see REST URLs . On successful execution, the change that you have made to data filters takes effect immediately during runtime. Data filters schema The full schema definition for the data filters configuration is in the AdapterName_DataFilters_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas Data filters parameters The following parameters are available for configuring data filters: Parameter Required Type Description Id Required string Unique identifier for the data filter. Allowed value: any string identifier AbsoluteDeadband Optional double Specifies the absolute change in data value that should cause the current value to pass the filter test. Note: You must specify AbsoluteDeadband or PercentChange . Allowed value: double value representing absolute deadband number Default value: null PercentChange Optional double Specifies the percent change from previous value that should cause the current value to pass the filter test. Note: You must specify AbsoluteDeadband or PercentChange . Allowed value: double value representing percent change Default value: null ExpirationPeriod Optional timespan The length in time that can elapse after an event before automatically sending the next event, regardless of whether the next event passes the filter or not. The expected format is HH:MM:SS.### or SSS.* Allowed value: any timespan Default value: null * Note: For example, \"ExpirationPeriod\": 5:00 and \"ExpirationPeriod\": 300 both specify an expiration period of 5 minutes and 0 seconds. Data filters example [ { \"Id\": \"DuplicateData\", \"AbsoluteDeadband\": 0, \"PercentChange\": null, \"ExpirationPeriod\": \"01:00:00\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ api v1 configuration  ComponentId /DataFilters  DataFilters GET Gets all configured data filters. api/v1/configuration/ api v1 configuration  ComponentId /DataFilters  DataFilters DELETE Deletes all configured data filters. api/v1/configuration/ api v1 configuration  ComponentId /DataFilters  DataFilters POST Adds an array of data filters or a single data filter. Fails if any data filter already exists. api/v1/configuration/ api v1 configuration  ComponentId /DataFilters  DataFilters PUT Replaces all data. api/v1/configuration/ api v1 configuration  ComponentId /DataFilters  DataFilters PATCH Allows partial updating of configured data filter. api/v1/configuration/ api v1 configuration  ComponentId /DataFilters/  DataFilters  id GET Gets configured data filter by id . api/v1/configuration/ api v1 configuration  ComponentId /DataFilters/  DataFilters  id DELETE Deletes configured data filter by id . api/v1/configuration/ api v1 configuration  ComponentId /DataFilters/  DataFilters  id PUT Replaces data filter by id . Fails if data filter does not exist. Note: Replace ComponentId with the Id of your adapter component."
                                                                    },
    "content/main/shared-content/configuration/diagnostics-and-metadata.html":  {
                                                                                    "href":  "content/main/shared-content/configuration/diagnostics-and-metadata.html",
                                                                                    "title":  "Diagnostics and metadata",
                                                                                    "keywords":  "Diagnostics and metadata You can configure PI adapters to produce and store diagnostics data at a designated health endpoint, and to send metadata for created streams. For more information about available diagnostics data, see Adapter diagnostics and Egress diagnostics . For more information about available metadata and what metadata are sent per metadata level, see Adapter Metadata . Configure general Start any of the Configuration tools capable of making HTTP requests. Run a PUT command to the following endpoint, setting EnableDiagnostics to either true or false , MetadataLevel to None , Low , Medium , or High and HealthPrefix to a string or null : http://localhost:5590/api/v1/configuration/system/general http:  localhost:5590 api v1 configuration system general Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"{ \\\"EnableDiagnostics\\\":true, \\\"MetadataLevel\\\":Medium, \\\"HealthPrefix\\\":\\\"Machine1\\\" }\" -X PUT \"http://localhost:5590/api/v1/configuration/system/general\" \"http:  localhost:5590 api v1 configuration system general\" Example using edgecmd : edgecmd set general -EnableDiagnostics true -MetadataLevel Medium -HealthPrefix Machine1 General schema The full schema definition for the general configuration is in the System_General_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas General parameters The following parameters are available for configuring general: Parameter Required Type Description EnableDiagnostics Optional boolean Determines if diagnostics are enabled Allowed value: true or false Default value: true MetadataLevel Optional reference Defines amount of metadata sent to OMF endpoints. Allowed value: None , Low , Medium , and High Default value: Medium HealthPrefix Optional reference Prefix to use for health and diagnostics stream and asset IDs. Default value: null Example Retrieve the general configuration Example using curl : curl -X GET \"http://localhost:{port}/api/v1/configuration/system/general\" \"http:  localhost:{port} api v1 configuration system general\" Example using edgecmd : edgecmd get general Sample output: { \"EnableDiagnostics\": true, \"MetadataLevel\": \"Medium\", \"HealthPrefix\": \"Machine1\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/General api v1 configuration system General GET Gets the general configuration api/v1/configuration/system/General api v1 configuration system General PUT Replaces the existing general configuration api/v1/configuration/system/General api v1 configuration system General PATCH Allows partial updating of general configuration"
                                                                                },
    "content/main/shared-content/configuration/discovery.html":  {
                                                                     "href":  "content/main/shared-content/configuration/discovery.html",
                                                                     "title":  "Discovery",
                                                                     "keywords":  "Discovery You can perform a data discovery for existing data items on demand. Data discovery is initiated through REST calls and it is tied to a specific discovery Id, which you can either specify or let the adapter generate it. Data discovery includes different routes. For example, you can choose to do the following: Retrieve the discovery results Query the discovery status Cancel or delete discoveries Merge discovery results with the data selection configuration Retrieve results from a current discovery and compare it with results from a previous or discovery Retrieve results from a current discovery and compare it with results from a current data selection configuration Configure discovery Start any of the Configuration tools capable of making HTTP requests. Run a POST command with the Id of the discovery and autoSelect set to either true or false to the following endpoint: http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/Discoveries http:  localhost:5590 api v1 configuration \u003cComponentId\u003e Discoveries . Notes: Including an Id is optional. If you do not include one, the adapter automatically generates one. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"{ \\\"Id\\\":\\\"TestDiscovery\\\", \\\"autoSelect\\\":true }\" -H \"Content-Type:application/json\" \"Content-Type:application json\" -X POST \"http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/Discoveries\" \"http:  localhost:5590 api v1 configuration \u003cComponentId\u003e Discoveries\" Example using edgecmd : edgecmd -cid \u003cComponentId\u003e add discoveries -id TestDiscovery -autoselect true Discovery parameters Parameter Type Description id string The Id of the discovery Notes: ??? You cannot run multiple discoveries with the same Id. ??? Including an id is optional. If you do not include one, the adapter automatically generates one. query string A filter that is specific to the data source. The query filter can limit the scope of the discovery. For more information, see the Data source configuration topic. startTime datetime Time when the discovery started endTime datetime Time when the discovery ended progress double Progress of the discovery itemsFound integer Number of data items that the discovery found on the data source newItems integer Number of new data items that the discovery found in comparison to the previous discovery resultUri integer URL at which you can access the results of the discovery autoSelect boolean When set to true , the result of the discovery gets pushed to the data selection configuration. status reference Status of the discovery, for example Active or Complete errors string Errors encountered during the discovery Discoveries status example The following example shows the status of all discoveries. The discovery id in this example was auto-generated. [ { \"id\": \"8ff855f1-a636-490a-bb31-207410a6e607\", \"query\": null, \"startTime\": \"2020-09-30T19:34:01.8180401+02:00\", \"endTime\": \"2020-09-30T19:34:01.8368776+02:00\", \"progress\": 30, \"itemsFound\": 4, \"newItems\": 0, \"resultUri\": \"http://127.0.0.1:5590/api/v1/Configuration/\u003cComponentId\u003e/Discoveries/8ff855f1-a636-490a-bb31-207410a6e607/result\", \"http:  127.0.0.1:5590 api v1 Configuration \u003cComponentId\u003e Discoveries 8ff855f1-a636-490a-bb31-207410a6e607 result\", \"autoSelect\": false, \"status\": \"Complete\", \"errors\": null } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries  discoveries GET Returns status of all discoveries api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries  discoveries POST Initiates a new discovery and returns its Id api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries  discoveries DELETE Cancels and deletes all saved discoveries api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries/  discoveries  \u003cdiscoveryId\u003e GET Gets the status of an individual discovery Note: If a discovery with the specified Id does not exist, you will get an error message api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries/  discoveries  \u003cdiscoveryId\u003e DELETE Cancels and deletes discovery and result api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries/  discoveries  \u003cdiscoveryId\u003e /result  result GET Returns the result of a discovery api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries/  discoveries  \u003cdiscoveryId\u003e /result?diff=  result?diff= previousId GET Returns the difference between the result and the previous result api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /dataselection?diff=  dataselection?diff= \u003cdiscoveryId\u003e GET Returns the difference between the data selection configuration and the discovery results api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries/  discoveries  \u003cdiscoveryId\u003e /result  result DELETE Cancels and deletes discovery result Note: The discovery Id is still valid, but a query will contain a status of canceled Only the Status property will contain a canceled status, but not the query api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /discoveries/  discoveries  \u003cdiscoveryId\u003e /cancel  cancel POST Cancels the on-demand data source discovery api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /dataselection/select?discoveryid=  dataselection select?discoveryid= \u003cdiscoveryId\u003e POST Adds the discovered items to data selection with selected set to true api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /dataselection/unselect?discoveryid=  dataselection unselect?discoveryid= \u003cdiscoveryId\u003e POST Adds the discovered items to data selection with selected set to false Note: Replace \u003ccomponentId\u003e with the Id of your adapter component. Replace \u003cdiscoveryId\u003e with the Id of the discovery for which you want to perform the action."
                                                                 },
    "content/main/shared-content/configuration/egress-endpoints.html":  {
                                                                            "href":  "content/main/shared-content/configuration/egress-endpoints.html",
                                                                            "title":  "Egress endpoints",
                                                                            "keywords":  "Egress endpoints PI adapters collect time series data, which they can send to a permanent data store (endpoint). This operation is called data egress. The following endpoints are available for data egress: OSIsoft Cloud Services (OCS) PI servers through PI Web API For long term storage and analysis, you can configure any adapter to send time series data to one or several of these endpoints in any combination. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Data egress to a PI server creates a PI point in the PI adapter configuration. Data egress to OCS creates a stream in the PI adapter configuration. The name of the PI point or OCS stream is a combination of the StreamIdPrefix specified in the adapter data source configuration and the StreamId specified in the adapter data selection configuration. Configure egress endpoints Complete the following steps to configure egress endpoints. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints http:  localhost:5590 api v1 configuration OmfEgress dataendpoints REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for egress endpoints into the file. For sample JSON, see Examples . Update the example JSON parameters for your environment. For a table of all available parameters, see Egress endpoint parameters . Save the file. For example, as ConfigureEgressEndpoints.json . Open a command line session. Change directory to the location of ConfigureEgressEndpoints.json . Enter the following cURL command (which uses the PUT method) to initialize the egress endpoints configuration. curl -d \"@ConfigureEgressEndpoints.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" \"http:  localhost:5590 api v1 configuration OmfEgress dataendpoints\" Alternatively, use the following edgecmd command: edgecmd -cid omfegress set DataEndpoints -file ./ConfigureEgressEndpoints.json . ConfigureEgressEndpoints.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or replacing an egress endpoints configuration, see REST URLs . Egress endpoint configuration schema The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas Egress endpoint parameters The following parameters are available for configuring egress endpoints: Parameter Required Type Description Id Optional string Unique identifier Allowed value: any string identifier Default value: new GUID Endpoint Required string Destination that accepts OMF v1.2 messages. Supported destinations include OCS and PI Server. Allowed value: well-formed http or https endpoint string Default: null Username Required for PI server endpoint string Basic authentication to the PI Web API OMF endpoint PI server: Allowed value: any string Default: null Note: If your username contains a backslash, you must add an escape character, for example, type OilCompany\\TestUser as OilCompany\\\\TestUser . Password Required for PI server endpoint string Basic authentication to the PI Web API OMF endpoint PI server: Allowed value: any string Default: null ClientId Required for OCS endpoint string Authentication with the OCS OMF endpoint Allowed value: any string, can be null if the endpoint URL schema is HTTP Default: null ClientSecret Required for OCS endpoint string Authentication with the OCS OMF endpoint Allowed value: any string, can be null if the endpoint URL schema is HTTP Default: null TokenEndpoint Optional for OCS endpoint string Retrieves an OCS token from an alternative endpoint Allowed value: well-formed http or https endpoint string Default value: null ValidateEndpointCertificate Optional boolean Disables verification of destination certificate. Note: Only use for testing with self-signed certificates. Allowed value: true or false Default value: true Special characters encoding The adapter encodes special characters used in the data selection StreamId parameter string before sending it to configured endpoints. The encoded characters look as follows: Special character Encoded character * %2a \u0027 %27 ` %60 \" %22 ? %3f ; %3b | %7c \\ %5c { %7b } %7d [ %5b ] %5d Examples The following examples are valid egress configurations: Egress data to OCS [{ \"Id\": \"OCS\", \"Endpoint\": \"https://\u003cOCS \"https:  \u003cOCS OMF endpoint\u003e\", \"ClientId\": \"\u003cclientid\u003e\", \"ClientSecret\": \"\u003cclientsecret\u003e\" }] Egress data to PI Web API [{ \"Id\": \"PI Web API\", \"Endpoint\": \"https://\u003cpi \"https:  \u003cpi web api server\u003e:\u003cport\u003e/piwebapi/omf/\", server\u003e:\u003cport\u003e piwebapi omf \", \"UserName\": \"\u003cusername\u003e\", \"Password\": \"\u003cpassword\u003e\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints api v1 configuration omfegress DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints api v1 configuration omfegress DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints api v1 configuration omfegress DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints api v1 configuration omfegress DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints api v1 configuration omfegress DataEndpoints PATCH Allows partial updating of configured endpoints. Note: The request must be an array containing one or more endpoints. Each endpoint in the array must include its Id . api/v1/configuration/omfegress/DataEndpoints/{Id} api v1 configuration omfegress DataEndpoints {Id} GET Gets configured endpoint by Id api/v1/configuration/omfegress/DataEndpoints/{Id} api v1 configuration omfegress DataEndpoints {Id} DELETE Deletes configured endpoint by Id api/v1/configuration/omfegress/DataEndpoints/{Id} api v1 configuration omfegress DataEndpoints {Id} PUT Updates or creates a new endpoint with the specified Id api/v1/configuration/omfegress/DataEndpoints/{Id} api v1 configuration omfegress DataEndpoints {Id} PATCH Allows partial updating of configured endpoint by Id Egress execution details After configuring an egress endpoint, egress is immediately run for that endpoint. Egress is handled individually per configured endpoint. When data is egressed for the first time, types and containers are egressed to the configured endpoint. After that only new or changed types or containers are egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If you delete an egress endpoint, data flow immediately stops for that endpoint. Buffered data in a deleted endpoint is permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the egress destination, failure to add a single item results in the message failing. Types, containers, and data are egressed as long as the destination continues to respond to HTTP requests."
                                                                        },
    "content/main/shared-content/configuration/egress-endpoints/configure-a-network-proxy.html":  {
                                                                                                      "href":  "content/main/shared-content/configuration/egress-endpoints/configure-a-network-proxy.html",
                                                                                                      "title":  "Configure a network proxy",
                                                                                                      "keywords":  "Configure a network proxy Some network architectures may need a network proxy between the PI adapter and the egress endpoint. The process for configuring the adapter to egress data through a network proxy varies depending on the proxy type. HTTPS forward proxy For the adapter to use an HTTPS forward proxy while egressing, configure the https_proxy environment variable. For information on how to configure system environment variables, refer to your platform specific documentation: Windows: setx Ubuntu: EnvironmentVariables Debian: EnvironmentVariables Docker: Environment variables in Compose The value of this environment variable must contain the URL of the proxy server, beginning with http . The format of the string is [user[:password]@]http://hostname[:port] [user[:password]@]http:  hostname[:port] . HTTPS proxy environment variable Parameter Required Description user Optional The user name for the HTTPS forward proxy. password Optional The password for the HTTPS forward proxy specified user name. If you specify user , password remains optional. port Optional If you do not specify port , the default 80 is used. Note: Usage of the https_proxy environment variable may affect other .NET or .NET Core applications. If you set this environment variable, it will affect the adapter egress endpoints and the adapter health endpoints. Examples: myUser@http://192.168.2.2 myUser@http:  192.168.2.2 myUser:myPassword@http://proxymachine.domain:3128 myUser:myPassword@http:  proxymachine.domain:3128 http://proxymachine.domain http:  proxymachine.domain In Windows, this may look something like: Example of an architecture with an https forward proxy: Reverse proxy For the adapter to use a reverse proxy while egressing, you must configure the reverse proxy as an egress endpoint. For information on how to configure an egress endpoint, see Egress endpoints configuration . Example: [{ \"Id\": \"PI Web API Through Proxy\", \"Endpoint\": \"https://\u003creverseProxy\u003e:\u003cport\u003e/piwebapi/omf/\", \"https:  \u003creverseProxy\u003e:\u003cport\u003e piwebapi omf \", \"UserName\": \"\u003cpiWebApiUser\u003e\", \"Password\": \"\u003cpiWebApiPassword\u003e\" }] Example of an architecture with a reverse proxy:"
                                                                                                  },
    "content/main/shared-content/configuration/egress-endpoints/prepare-egress-destinations.html":  {
                                                                                                        "href":  "content/main/shared-content/configuration/egress-endpoints/prepare-egress-destinations.html",
                                                                                                        "title":  "Prepare egress destinations",
                                                                                                        "keywords":  "Prepare egress destinations OCS and PI Server destinations may require additional configuration to receive OMF messages. OCS To prepare OCS to receive OMF messages from the adapter, create an OMF connection in OCS. Creating an OMF connection results in an available OMF endpoint that can be used by the adapter egress mechanism. Complete the following steps to create an OMF connection: Create a Client . The Client Id and Client Secret will be used for the corresponding properties in the egress configuration. Create an OMF type Connection . The connection should link the created client to an existing namespace where the data will be stored. The OMF Endpoint URL for the connection will be used as the egress configuration Endpoint property. PI Server To prepare a PI Server to receive OMF messages from the adapter, a PI Web API OMF endpoint must be available. Complete the following steps: Install PI Web API and enable the OSIsoft Message Format (OMF) Services feature. During configuration, choose an AF database and PI Data Archive where metadata and data will be stored. The account used in an egress configuration needs permissions to create AF elements, element templates, and PI points. Configure PI Web API to use Basic authentication. For complete steps, as well as best practices and recommendations, see the following topic in the PI Web API User Guide: Authentication methods . Notes: The certificate used by PI Web API must be trusted by the device running the adapter, otherwise the egress configuration ValidateEndpointCertificate property needs to be set to false (this can be the case with a self-signed certificate but should only be used for testing purposes). To continue to send OMF egress messages to the PI Web API endpoint after upgrading PI Web API, restart the adapter service."
                                                                                                    },
    "content/main/shared-content/configuration/health-endpoints.html":  {
                                                                            "href":  "content/main/shared-content/configuration/health-endpoints.html",
                                                                            "title":  "Health endpoints",
                                                                            "keywords":  "Health endpoints You can configure PI adapters to produce and store health data at a designated health endpoint. You can use health data to ensure that your adapters are running properly and that data flows to the configured OMF endpoints. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OMF endpoint where adapter health information is sent. You can configure multiple health endpoints. Complete the following steps to configure health endpoints. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/system/healthendpoints http:  localhost:5590 api v1 configuration system healthendpoints REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for health endpoints into the file. For sample JSON, see Examples . Update the example JSON parameters for your environment. For a table of all available parameters, see Health endpoint parameters . Save the file. For example, as ConfigureHealthEndpoints.json . Open a command line session. Change directory to the location of ConfigureHealthEndpoints.json . Enter the following cURL command (which uses the PUT method) to initialize the health endpoint configuration. curl -d \"@ConfigureHealthEndpoints.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/healthendpoints\" \"http:  localhost:5590 api v1 configuration system healthendpoints\" Alternatively, use the following edgecmd command: edgecmd set healthendpoints -file ./ConfigureHealthEndpoints.json . ConfigureHealthEndpoints.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or replacing a health endpoints configuration, see REST URLs . Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas Health endpoint parameters The following parameters are available for configuring health endpoints: Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Allowed value: any string identifier Default value: new GUID Endpoint Required string The URL of the OMF endpoint to receive this health data Allowed value: well-formed http or https endpoint string Default: null Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint PI server: Allowed value: any string Default: null Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint PI server: Allowed value: any string Default: null ClientId Required for OCS endpoints string The client ID used for authentication with an OSIsoft Cloud Services OMF endpoint Allowed value: any string Default: null ClientSecret Required for OCS endpoints string The client secret used for authentication with an OSIsoft Cloud Services OMF endpoint Allowed value: any string Default: null TokenEndpoint Optional for OCS endpoints string Retrieves an OCS token from an alternative endpoint Allowed value: well-formed http or https endpoint string Default value: null ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends keeping this set to the default, true, in production environments. Allowed value: true or false Default value: true Examples OCS endpoint { \"Id\": \"OCS\", \"Endpoint\": \"https://\u003cOCS \"https:  \u003cOCS OMF endpoint\u003e\", \"ClientId\": \"\u003cclientid\u003e\", \"ClientSecret\": \"\u003cclientsecret\u003e\" } PI Web API endpoint { \"Id\": \"PI Web API\", \"Endpoint\": \"https://\u003cpi \"https:  \u003cpi web api server\u003e:\u003cport\u003e/piwebapi/omf/\", server\u003e:\u003cport\u003e piwebapi omf \", \"UserName\": \"\u003cusername\u003e\", \"Password\": \"\u003cpassword\u003e\" } Note: When you use an adapter with a PI Web API health endpoint, the AF structure is required. If the elements are deleted, the adapter recreates the elements; if the account used to authenticate to the PI Web API has its permissions removed on the AF Server, the adapter retries sending health data to the PI Web API until the permissions are restored. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/healthEndpoints api v1 configuration system healthEndpoints GET Gets all configured health endpoints api/v1/configuration/system/healthEndpoints api v1 configuration system healthEndpoints DELETE Deletes all configured health endpoints api/v1/configuration/system/healthEndpoints api v1 configuration system healthEndpoints POST Adds an array of health endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/system/healthEndpoints api v1 configuration system healthEndpoints PUT Replaces all health endpoints. Note: Requires an array of endpoints api/v1/configuration/system/healthEndpoints api v1 configuration system healthEndpoints PATCH Allows partial updating of configured health endpoints Note: The request must be an array containing one or more health endpoints. Each health endpoint in the array must include its Id . api/v1/configuration/system/healthEndpoints/ api v1 configuration system healthEndpoints  Id GET Gets configured health endpoint by Id api/v1/configuration/system/healthEndpoints/ api v1 configuration system healthEndpoints  Id DELETE Deletes configured health endpoint by Id api/v1/configuration/system/healthEndpoints/ api v1 configuration system healthEndpoints  Id PUT Updates or creates a new health endpoint with the specified Id api/v1/configuration/system/healthEndpoints/ api v1 configuration system healthEndpoints  Id PATCH Allows partial updating of configured health endpoint by Id Note: Replace Id with the Id of the health endpoint."
                                                                        },
    "content/main/shared-content/configuration/history-recovery.html":  {
                                                                            "href":  "content/main/shared-content/configuration/history-recovery.html",
                                                                            "title":  "History recovery",
                                                                            "keywords":  "History recovery The adapter you are using supports the following data collection modes which you configure in the DataCollectionMode parameter of your adapter\u0027s data source configuration: CurrentOnly : The adapter component operates normally. History recovery is disabled. CurrentWithBackfill (Default): The adapter component operates normally, but disconnections and shutdown events are recorded in the form of recovery intervals. When the adapter is reconnected to a data source, it automatically backfills data for the recorded intervals. HistoryOnly : The adapter component does not get started. The adapter is able to start collecting historical data on demand. History recovery for adapters supports the following two operations related to the data collection mode: On demand history recovery : Recovers data from a specified start time or start and end time. If end time is not specified, the default is utcnow . On demand history recovery is available only when the adapter is in HistoryOnly data collection mode. Limited automatic history recovery : Backfills data gaps that originated from connection disruptions, data source issues, or PI adapter shutdown or both. This is limited to a maximum time-range of four days. Limited automatic history recovery is available only when the adapter is in CurrentWithBackfill data collection mode."
                                                                        },
    "content/main/shared-content/configuration/history-recovery/automatic-history-recovery.html":  {
                                                                                                       "href":  "content/main/shared-content/configuration/history-recovery/automatic-history-recovery.html",
                                                                                                       "title":  "Automatic history recovery",
                                                                                                       "keywords":  "Automatic history recovery Besides on-demand history recovery, the PI adapter also supports automatic history recovery. For automatic history recovery, the adapter tracks changes to the DeviceStatus of each component. When the DeviceStatus changes to DeviceInError or Shutdown , the adapter starts a new History recovery interval . When the issue resolves or if the adapter is restarted and the DeviceStatus changes to Good , the adapter closes any current intervals for that component. The adapter tracks these intervals for each component and, when DeviceStatus has a value of Good , it performs history recovery for these intervals starting from oldest to newest. For more information, see also Device status . Note: If the data collection mode is set to CurrentWithBackfill , the adapter clears periods not recovered for the component and stops keeping track of them. Only if the data collection mode is set to HistoryOnly , an automatic history recovery operation in progress will be canceled, otherwise it will be finished. History recovery intervals Automatic history intervals cannot be longer than four days. If an interval is longer than four days, the adapter automatically changes the start time of the interval to be no earlier than four days before the end time prior to starting a recovery. If a current outage lasts longer than four days, when the device status finally improves the adapter recovers up to four days before the current time. This avoids introducing additional data gaps."
                                                                                                   },
    "content/main/shared-content/configuration/history-recovery/on-demand-history-recovery-configuration.html":  {
                                                                                                                     "href":  "content/main/shared-content/configuration/history-recovery/on-demand-history-recovery-configuration.html",
                                                                                                                     "title":  "On-demand history recovery configuration",
                                                                                                                     "keywords":  "On-demand history recovery configuration The PI adapter supports performing history recovery on-demand by specifying start and end time. Configure history recovery Start any of the Configuration tools capable of making HTTP requests. Run a POST command with the Id of the history recovery, and the startTime and endTime to the following endpoint: http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/HistoryRecoveries http:  localhost:5590 api v1 configuration \u003cComponentId\u003e HistoryRecoveries . Example using curl : curl -d \"{ \\\"Id\\\":\\\"TestRecovery\\\", \\\"startTime\\\":\\\"2021-03-29T14:00:30Z\\\", \\\"endTime\\\":\\\"2021-03-29T15:00:15Z\\\" }\" -X POST \"http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/HistoryRecoveries\" \"http:  localhost:5590 api v1 configuration \u003cComponentId\u003e HistoryRecoveries\" Example using edgecmd : edgecmd -cid \u003cComponentId\u003e add HistoryRecoveries -id TestRecovery -startTime \"2021-03-29T14:00:30Z\" -endTime \"2021-03-29T15:00:15Z\" **Note:** - `5590` is the default port number. If you selected a different port number, replace it with that value. - If you do not specify an Id, the endpoint generates a unique Id. History recovery parameters Parameter Type Description Id string The Id of the history recovery Note: You cannot run multiple history recoveries with the same Id. StartTime datetime Time when the the first data items are collected. EndTime datetime Time when the last data items are collected. Checkpoint datetime The latest timestamp that the history recovery has completed with the range being between startTime and endTime . Items double The amount of data selection items in the history recovery operation. RecoveredEvents double Number of events that the history recovery found on the data source. Progress double Progress of the history recovery (number of data items found through the history recovery). Status enum Status of the history recovery. The following statuses are available: - Active - The operation is currently in progress - Complete - The operation has been completed - Canceled - The operation has been canceled - Failed - The operation failed Errors string Errors encountered during the history recovery. History recovery status example [ { \"Id\": \"HistoryRecovery1\", \"StartTime\": \"2021-01-09T05:55:00.0\", \"EndTime\": \"2021-01-26T13:20:00.0\", \"CheckPoint\": \"2021-01-13T14:55:00.0\", \"Items\": 7000, \"RecoveredEvents\": 800000, \"Progress\": 20, \"Status\": \"Active\", \"Errors\": null } ] Note: The result of the history recovery operation is added to the \u003ccomponentId\u003e_historyRecoveries.json file. REST URLs Relative URL HTTP verb Action api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries  historyRecoveries GET Returns all history recoveries statuses api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries  historyRecoveries POST Initiates a new history recovery, returns the id of the operation api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries  historyRecoveries DELETE Cancels all active history recovery operations and removes states api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries/  historyRecoveries  \u003coperationId\u003e GET Gets the status of an individual history recovery api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries/  historyRecoveries  \u003coperationId\u003e DELETE Cancels history recovery and removes the state api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries/  historyRecoveries  \u003coperationId\u003e /cancel  cancel POST Cancels history recovery api/v1/configuration/ api v1 configuration  \u003ccomponentId\u003e /historyRecoveries/  historyRecoveries  \u003coperationId\u003e /resume  resume POST Resumes canceled or failed history recovery operation ( 202 ) from the checkpoint Note: If the \u003coperationId\u003e is not found, a 404 HTTP error message will be returned Note: Replace \u003ccomponentId\u003e with the Id of your adapter component. Replace \u003coperationId\u003e with the Id of the history recovery operation for which you want to perform the action."
                                                                                                                 },
    "content/main/shared-content/configuration/logging.html":  {
                                                                   "href":  "content/main/shared-content/configuration/logging.html",
                                                                   "title":  "Logging",
                                                                   "keywords":  "Logging PI adapters write daily log messages for the adapter, the system, and OMF egress to flat text files in the following locations: ??? Windows: %ProgramData%\\OSIsoft\\Adapters{AdapterInstance}\\Logs ??? Linux: /usr/share/OSIsoft/Adapters/{AdapterInstance}/Logs  usr share OSIsoft Adapters {AdapterInstance} Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging Complete the following steps to configure logging. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/Logging http:  localhost:5590 api v1 configuration \u003cComponentId\u003e Logging REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for logging into the file. For sample JSON, see Example . Update the example JSON parameters for your environment. For a table of all available parameters, see Logging parameters . Save the file. For example, as ConfigureLogging.json . Open a command line session. Change directory to the location of ConfigureLogging.json . Enter the following cURL command (which uses the PUT method) to initialize the logging configuration. curl -d \"@ConfigureLogging.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/Logging\" \"http:  localhost:5590 api v1 configuration \u003cComponentId\u003e Logging\" edgecmd -cid \u003cComponentId\u003e set logging -file ./ConfigureLogging.json . ConfigureLogging.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or retrieving a logging configuration, see REST URLs . Any parameter not specified in the updated configuration file reverts to the default schema value On successful execution, the log-level change takes effect immediately during runtime. The other configurations (log file size and file count) are updated after the adapter is restarted. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas Logging parameters The following parameters are available for configuring logging: Parameter Required Type Description LogLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace , Debug , Information , Warning , Error , Critical , and None . Default log level: Information For detailed information about the log levels, see LogLevel . LogFileSizeLimitBytes Optional integer The maximum size (in bytes) of log files that the service will create for the component. The value must be a positive integer. Minimum value: 1000 Maximum value: 9223372036854775807 Default value: 34636833 LogFileCountLimit Optional integer The maximum number of log files that the service will create for the component. The value must be a positive integer. Minimum value: 1 Maximum value: 2147483647 Default value: 31 LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages should not be enabled in production environment. Note: Trace is translated to Verbose in the log file. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information like the following can be useful for diagnosing potential application errors: - Version information related to the software at startup - External services used - Data source connection string - Number of measurements - Egress URL - Change of state ???Starting??? or ???Stopping??? - Configuration Warning Logs that highlight an abnormal or unexpected event in the application flow that does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, an insecure communication channel in use, or any other event that could require attention but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity and not an application-wide failure. It can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. Note: Critical is translated to Fatal in the log file. None Logging is disabled for the given component. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the installation default for a component: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } REST URLs Relative URL HTTP verb Action api/v1/configuration/System/Logging api v1 configuration System Logging GET Retrieves the system logging configuration api/v1/configuration/System/Logging api v1 configuration System Logging PUT Updates the system logging configuration api/v1/configuration/ api v1 configuration  ComponentId /Logging  Logging GET Retrieves the logging configuration of the specified adapter component api/v1/configuration/ api v1 configuration  ComponentId /Logging  Logging PUT Updates the logging configuration of the specified adapter component Note: Replace ComponentId with the Id of your adapter component."
                                                               },
    "content/main/shared-content/configuration/schedules.html":  {
                                                                     "href":  "content/main/shared-content/configuration/schedules.html",
                                                                     "title":  "Schedules",
                                                                     "keywords":  "Schedules You can configure the adapter to run scans based on a schedule. Each data item can be assigned to a schedule in the data selection configuration. The adapter samples data for those data items at the scheduled time. Note: You start an ingress component without a schedule configuration, a default schedule configuration is added to use as an example. Note: When the adapter framework scheduler misses or skips a scan for any reason, either one of the following messages is printed: Scan skipped for schedule id \u003cId\u003e or Scan missed for schedule \u003cid\u003e . Configure schedules Complete the following steps to change the schedules configuration: Using any text editor, create a file that contains the schedules configuration in the JSON format. For content structure, see the example schedule configuration . For all available parameters, see the schedules parameters . Save the file. For example, ConfigureSchedules.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/Schedules http:  localhost:5590 api v1 configuration \u003cComponentId\u003e Schedules . Note: Replace \u003cComponentId\u003e with the ComponentId of the adapter. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@ConfigureSchedules.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/\u003cComponentId\u003e/Schedules\" \"http:  localhost:5590 api v1 configuration \u003cComponentId\u003e Schedules\" Example using edgecmd : edgecmd -cid \u003cComponentId\u003e set schedules -file ./ConfigureSchedules.json . ConfigureSchedules.json On successful execution, the schedules change takes effect immediately during runtime. Schedules schema The full schema definition for the schedules configuration is in the AdapterName_Schedules_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Schemas Linux: /opt/OSIsoft/Adapters/\u003cAdapterName\u003e/Schemas  opt OSIsoft Adapters \u003cAdapterName\u003e Schemas Schedules parameters The following parameters are available for configuring schedules: Parameter Required Type Description Id Required string Unique identifier for the schedule Allowed value: any string identifier Period Required string The data sampling rate of the schedule. The expected format is HH:MM:SS.###. Invalid inputs: null , negative timespan, or zero A default value must be specified. Offset Optional string The offset from the midnight when the schedule starts. The expected format is HH:MM:SS.### Invalid input: negative timespan A default value must be specified. Note: You can also specify timespans as numbers in seconds. For example, \"Period\": 25 specifies 25 seconds, or \"Period\": 125 specifies 2 minutes and 5 seconds. Example schedule configuration The following is an example of a complete schedule configuration: [ { \"Id\": \"schedule1\", \"Period\": \"00:00:01.500\", \"Offset\": \"00:02:03\" } ] Default schedule configuration If no schedule is configured, the adapter uses the following default schedule configuration: [ { \"Id\": \"1\", \"Period\": \"0:00:05\", \"Offset\": \"0:00:00\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ api v1 configuration  ComponentId /Schedules  Schedules GET Gets all configured schedules api/v1/configuration/ api v1 configuration  ComponentId /Schedules  Schedules DELETE Deletes all configured schedules api/v1/configuration/ api v1 configuration  ComponentId /Schedules  Schedules POST Adds an array of schedules or a single schedule. Fails if any schedule already exists api/v1/configuration/ api v1 configuration  ComponentId /Schedules  Schedules PUT Replaces all schedules api/v1/configuration/ api v1 configuration  ComponentId /Schedules/  Schedules  id GET Gets configured schedule by id api/v1/configuration/ api v1 configuration  ComponentId /Schedules/  Schedules  id DELETE Deletes configured schedule by id api/v1/configuration/ api v1 configuration  ComponentId /Schedules/  Schedules  id PUT Replaces schedule by id . Fails if schedule does not exist api/v1/configuration/ api v1 configuration  ComponentId /Schedules/  Schedules  id PATCH Allows partial updating of configured schedule by id Note: Replace ComponentId with the Id of your adapter component."
                                                                 },
    "content/main/shared-content/configuration/system-and-adapter.html":  {
                                                                              "href":  "content/main/shared-content/configuration/system-and-adapter.html",
                                                                              "title":  "System and adapter",
                                                                              "keywords":  "System and adapter You can configure the system component and adapter component together using a single file. Change system and adapter configuration Complete the following steps to configure system and adapter. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration http:  localhost:5590 api v1 configuration REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for system and adapter into the file. For sample JSON, see the corresponding adapter configuration examples topic. Save the file. For example, as ConfigureSystemAndAdapter.json . Open a command line session. Change directory to the location of ConfigureSystemAndAdapter.json . Enter the following cURL command (which uses the PUT method) to initialize the system and adapter configuration. curl -d \"@ConfigureSystemAndAdapter.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration\" \"http:  localhost:5590 api v1 configuration\" Alternatively, use the following edgecmd command: edgecmd set application -file ./ConfigureSystemAndAdapter.json . ConfigureSystemAndAdapter.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. In order for some of the adapter specific configurations to take effect, you have to restart the adapter. Discoveries and HistoryRecoveries facet details are not required to be supplied as part of the configuration and supplied values will be ignored. Their results will be restored from the previous states. If the operation fails due to errors in the configuration, the count of the error and suitable error messages are returned in the result. REST URLs Relative URL HTTP verb Action api/v1/configuration/ api v1 configuration  PUT Replaces the configuration for the entire adapter"
                                                                          },
    "content/main/shared-content/configuration/system-components.html":  {
                                                                             "href":  "content/main/shared-content/configuration/system-components.html",
                                                                             "title":  "System components",
                                                                             "keywords":  "System components PI adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form where cryptographic key material is stored separately in a secure location. If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system individually using REST, but you can also configure the system as a whole with a single REST call. Configure system components Complete the following steps to configure system components. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/system/components http:  localhost:5590 api v1 configuration system components REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for system components into the file. For sample JSON, see Examples . Update the example JSON parameters for your environment. For a table of all available parameters, see System components parameters . Save the file. For example, as ConfigureComponents.json . Open a command line session. Change directory to the location of ConfigureComponents.json . Enter the following cURL command (which uses the PUT method) to initialize the system components configuration. curl -d \"@ConfigureComponents.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" \"http:  localhost:5590 api v1 configuration system components\" Alternatively, use the following edgecmd command: edgecmd set components -file ./ConfigureComponents.json . ConfigureComponents.json Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or deleting a system components configuration, see REST URLs . System components schema The full schema definition for the system components configuration is in the System_Components_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas  opt OSIsoft Adapters AdapterName Schemas System components parameters You can configure the following parameters for system components: Parameters Required Type Description ComponentId Required string The ID of the component 1 . It can be any alphanumeric string. A properly configured ComponentID follows these rules: Cannot contain leading or trailing space Cannot use the following characters: \u003e \u003c /   : ? # [ ] @ ! $ \u0026 * \" ( ) \\\\ + , ; = ` ComponentType Required string The type of the component. There are two types of components: OmfEgress and the adapter. 1 1 Note: The OmfEgress component is required to run the adapter. Both its ComponentId and ComponentType are reserved and should not be modified. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration with two adapter instances [ { \"ComponentId\": \"\u003cAdapterName\u003e1\", \"ComponentType\": \"\u003cAdapterName\u003e\" }, { \"ComponentId\": \"\u003cAdapterName\u003e2\", \"ComponentType\": \"\u003cAdapterName\u003e\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components api v1 configuration system components GET Retrieves the system components configuration api/v1/configuration/system/components api v1 configuration system components POST Adds a new component to the system configuration api/v1/configuration/system/components api v1 configuration system components PUT Updates the system components configuration api/v1/configuration/system/components/ api v1 configuration system components  ComponentId DELETE Deletes a specific component from the system components configuration api/v1/configuration/system/components/ api v1 configuration system components  ComponentId PUT Creates a new component with the specified ComponentId in the system configuration"
                                                                         },
    "content/main/shared-content/configuration/text-parser/jsonpath-syntax-for-value-retrieval.html":  {
                                                                                                           "href":  "content/main/shared-content/configuration/text-parser/jsonpath-syntax-for-value-retrieval.html",
                                                                                                           "title":  "JSONPath syntax for value retrieval",
                                                                                                           "keywords":  "JSONPath syntax for value retrieval For information on which semantic is used for retrieving values from JSON files, see JSONPath Syntax . The following syntax is used to extract values from JSON documents. JSON - Simple JSONPath example [ { \"time\": \"2020-08-10T12:10:46.0928791Z\", \"value\": 1.234567890 }, { \"time\": \"2020-08-10T12:10:47.0928791Z\", \"value\": 12.34567890 }, { \"time\": \"2020-08-10T12:10:48.0928791Z\", \"value\": 123.4567890 }, { \"time\": \"2020-08-10T12:10:49.0928791Z\", \"value\": 1234.567890 }, { \"time\": \"2020-08-10T12:10:50.0928791Z\", \"value\": 12345.67890 }, { \"time\": \"2020-08-10T12:10:51.0928791Z\", \"value\": 123456.7890 }, { \"time\": \"2020-08-10T12:10:52.0928791Z\", \"value\": 12345678.90 }, { \"time\": \"2020-08-10T12:10:53.0928791Z\", \"value\": 123456789.0 } ] The following JSONPath configuration reads a series of values: { \"Id\": \"DoubleValue\", \"FieldDefinition\": \"value\", \"DataType\": \"Double\" }, { \"Id\": \"Timestamp\", \"FieldDefinition\": \"time\", \"DataType\": \"DateTime\", \"IsIndex\": true } JSON - Complex JSONPath examples The following example reads specific values from a JSON array: { \"StreamData\": { \"TPPrototype.uflsample.value_time\": [ { \"StreamId\": \"TPPrototype.uflsample.value_time\", \"DataType\": \"Double\", \"Timestamp\": \"2013-12-01T06:00:00Z\", \"Value\": 339.0 }, { \"StreamId\": \"TPPrototype.uflsample.value_time\", \"DataType\": \"Double\", \"Timestamp\": \"2013-12-01T07:00:00Z\", \"Value\": 344.0 }, { \"StreamId\": \"TPPrototype.uflsample.value_time\", \"DataType\": \"Double\", \"Timestamp\": \"2013-12-01T17:00:00Z\", \"Value\": 341.0 } ], \"TPPrototype.uflsample.value_timeString\": [ { \"StreamId\": \"TPPrototype.uflsample.value_timeString\", \"DataType\": \"String\", \"Timestamp\": \"2013-12-01T06:00:00Z\", \"Value\": \"339.0\" }, { \"StreamId\": \"TPPrototype.uflsample.value_timeString\", \"DataType\": \"String\", \"Timestamp\": \"2013-12-01T07:00:00Z\", \"Value\": \"344.0\" }, { \"StreamId\": \"TPPrototype.uflsample.value_timeString\", \"DataType\": \"String\", \"Timestamp\": \"2013-12-01T17:00:00Z\", \"Value\": \"341.0\" } ], \"TPPrototype.uflsample.pressure_time\": [ { \"StreamId\": \"TPPrototype.uflsample.pressure_time\", \"DataType\": \"Double\", \"Timestamp\": \"2013-12-01T06:00:00Z\", \"Value\": 339.0 }, { \"StreamId\": \"TPPrototype.uflsample.pressure_time\", \"DataType\": \"Double\", \"Timestamp\": \"2013-12-01T07:00:00Z\", \"Value\": 344.0 }, { \"StreamId\": \"TPPrototype.uflsample.pressure_time\", \"DataType\": \"Double\", \"Timestamp\": \"2013-12-01T17:00:00Z\", \"Value\": 341.0 } ] } } The following JSONPath configuration reads all the TPPrototype.uflsample.value_time values from the JSON above: { \"Id\": \"Value\", \"DataType\": \"Double\", \"FieldDefinition\": \"$[\u0027StreamData\u0027].[\u0027TPPrototype.uflsample.value_time\u0027][*].Value\" }, { \"Id\": \"Time\", \"DataType\": \"DateTime\", \"FieldDefinition\": \"$[\u0027StreamData\u0027].[\u0027TPPrototype.uflsample.value_time\u0027][*].Timestamp\", \"IsIndex\": true } The following example reads specific value from complex nested JSON: { \"success\": true, \"error\": null, \"result\": { \"type\": \"runtime_history\", \"chart\": { \"chart\": { \"type\": \"column\" }, \"title\": { \"text\": \"\" }, \"subtitle\": { \"text\": \"Daily History\" }, \"colors\": [ \"#fee292\", \"#fdc152\", \"#f69638\", \"#f17130\", \"#9f2d26\", \"#8acadc\", \"#184c8e\" ], \"series\": [ { \"name\": \"Stage 3 Aux Heat\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"heat\", \"state\": \"heat_aux_stage3\" }, { \"name\": \"Stage 2 Aux Heat\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"heat\", \"state\": \"heat_aux_stage2\" }, { \"name\": \"Aux Heat\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"heat\", \"state\": \"heat_aux\" }, { \"name\": \"Stage 2 Heat\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"heat\", \"state\": \"heat_stage2\" }, { \"name\": \"Heat\", \"data\": [ 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.3, 0.2, 0.0 ], \"stack\": \"heat\", \"state\": \"heat\" }, { \"name\": \"Stage 2 Cool\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"cool\", \"state\": \"cool_stage2\" }, { \"name\": \"Cool\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"cool\", \"state\": \"cool\" } ], \"xAxis\": { \"categories\": [ \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ], \"labels\": { \"rotation\": -45 } }, \"yAxis\": { \"allowDecimals\": false, \"min\": 0, \"max\": 24, \"tickInternval\": 4, \"title\": { \"text\": \"Runtime (Hours)\" } }, \"legend\": { \"layout\": \"vertical\", \"align\": \"center\", \"floating\": false, \"shadow\": false, \"itemStyle\": { \"fontSize\": \"1em\" } }, \"tooltip\": { \"shared\": true, \"borderColor\": \"#000000\" }, \"credits\": { \"enabled\": false }, \"plotOptions\": { \"column\": { \"stacking\": \"normal\" }, \"series\": { \"shadow\": false } } }, \"table\": { \"headings\": [ \"Fri\", \"Sat\", \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ], \"series\": [ { \"name\": \"Aux Heat\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": \"heat\", \"state\": \"heat_aux\" }, { \"name\": \"Outdoor High Temp.\", \"data\": [ 72.0, 64.0, 73.0, 72.0, 67.0, 73.0, 77.0, 62.0, 51.0 ], \"stack\": null, \"state\": \"outdoor_high_temperature\" }, { \"name\": \"Outdoor Low Temp.\", \"data\": [ 55.0, 60.0, 62.0, 61.0, 51.0, 43.0, 46.0, 44.0, 35.0 ], \"stack\": null, \"state\": \"outdoor_low_temperature\" }, { \"name\": \"Avg Indoor Temp.\", \"data\": [ 76.0, 77.0, 78.0, 78.0, 77.0, 73.0, 74.0, 75.0, 72.0 ], \"stack\": null, \"state\": \"average_indoor_temperature\" }, { \"name\": \"Avg Indoor Humidity\", \"data\": [ 66.0, 68.0, 70.0, 70.0, 69.0, 67.0, 67.0, 66.0, 61.0 ], \"stack\": null, \"state\": \"average_indoor_humidity\" }, { \"name\": \"Fan Only Runtime\", \"data\": [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ], \"stack\": null, \"state\": \"fan_only\" }, { \"name\": \"Vent\", \"data\": [], \"stack\": null, \"state\": \"vent\" } ] }, \"show_monthly_runtime_history\": true } } The following JSONPath configuration reads Sunday Average Indoor Temperature. The timestamp comes from Adapter local time. { \"Id\": \"Temperature\", \"DataType\": \"Double\", \"FieldDefinition\": \"$.result.table.series[3].data[2]\" }, { \"Id\": \"Timestamp\", \"DataType\": \"DateTime\", \"Format\": \"Adapter\", \"IsIndex\": true } Error handling If you encounter text parser related errors that is errors for the ValueField or IndexField , check the StreamId associated with the error message. Possible errors include the following: The JSONPath expression of ValueField or IndexField is pointing to a non-existing value The JSONPath expression of ValueField or IndexField is missing a value altogether DataType does not match the value"
                                                                                                       },
    "content/main/shared-content/configuration/text-parser/text-parser.html":  {
                                                                                   "href":  "content/main/shared-content/configuration/text-parser/text-parser.html",
                                                                                   "title":  "Text parser",
                                                                                   "keywords":  "Text parser The adapter you are using includes the text parser component which ensures consistent parsing of text from different files. For more information on which file types are supported for your adapter, see the topics in this chapter. Designed to be a document parser, the text parser parses a semantically complete document in its entirety. The text parser produces OMF compatible output, which in turn is compatible with the OCS backing SDS (Sequential Data Store) that stores data in streams consisting of multiple values and indexes. Data types supported by the text parser The following data types are supported by the text parser: DateTime DateTimeOffset TimeSpan sbyte byte short ushort int uint long ulong float double decimal bool char string Note: Not all data types supported by the text parser are also supported by OMF. Special characters support As part of the default StreamId logic, the text parser replaces special characters as follows: Special character Replacement character * empty string \u0027 empty string ` empty string \" empty string ? empty string ; - \\| - \\ - { ( } ) [ ( ] ) Culture support Some numeric values and datetimes support cultures when they are being parsed. The default culture is en-US (US English) (InvariantCulture). OSIsoft recommends that you leave the adapter at the default unless you expect culturally variant input. Note: Installed cultures vary by machine with both Linux and Windows. If the specified culture is not installed, the text parser fails to parse input that requires that culture. Time zone support A time zone or offset specified by a time is always used to convert to UTC time. Time zones are only used if there is no offset or time zone specifier in a text date and time string. For time zones that support time changes between daylight and standard times, a text file may temporarily contain invalid or ambiguous datetimes during the time change, which are possible only for a two-hour period each year. When these time changes occur, the text parser logs them, but the datetime is parsed and passed to the callback. Ambiguous times are reported as standard times, which is the Microsoft recommendation. Date and time processing The text parser can use time zones, cultures, and custom formats to read dates and times from ingress data. You can specify date and time formats when you configure data selection. Set the date and time using the IndexFormat property. If you leave the IndexFormat property unset, the data selection configuration defaults to the ISO 8601 date format. If you are using a culture other than default en-US , use the name of day or month specific to the culture. For example, use \"Juni\" instead of \"June\" for the de-DE culture. The following date and time syntaxes have been tested and are supported. \"MM/dd/yyyy \"MM dd yyyy H:mm:ss zzz\" \"06/15/2018 \"06 15 2018 15:15:30 -05:00\" \"MM/dd/yyyy \"MM dd yyyy H:mm:ss.fff zzz\" \"06/15/2018 \"06 15 2018 15:15:30.123 -05:00\" \"dd/MM/yyyy \"dd MM yyyy H:mm:ss.fff K\" \"15/06/2018 \"15 06 2018 15:15:30.123 Z\" \"MMMM/dd/yyyy \"MMMM dd yyyy H:mm:ss.fff K\" \"June/15/2018 \"June 15 2018 15:15:30.123 Z\" (InvariantCulture/English) (InvariantCulture English) \"MMMM/dd/yyyy \"MMMM dd yyyy H:mm:ss.fff K\" \"Juni/15/2018 \"Juni 15 2018 15:15:30.123 Z\" (German) \"MMM/dd/yyyy \"MMM dd yyyy H:mm:ss.fff K\" \"Jun/15/2018 \"Jun 15 2018 15:15:30.123 Z\" \"MMM-dd-yyyy H:mm:ss.fff K\" \"Jun-15-2018 15:15:30.123 Z\" \"MMM-dd-yyyy H:mm:ss.fff K\" \"Jun-15-2018 15:15:30.123 Z\" \"MMM-dd-yyyy H:mm:ss.fff K\" \"Jun-15-2018 15:15:30.123 Z\" \"yyyy-MM-dd H:mm:ss.fff K\" \"2018-06-15 15:15:30.123 Z\" \"yyyy-M-d H:mm:ss.fff K\" \"2018-6-5 15:15:30.123 Z\" \"yyyy-M-d H:mm:ss.fff zzz\" \"2018-6-5 15:15:30.123 +05:00\" \"ddd dd MMM yyyy h:mm tt zzz\" \"Sun 15 Jun 2008 8:30 AM -06:00\" \"dddd dd MMM yyyy h:mm tt zzz\" \"Sunday 15 Jun 2008 8:30 AM -06:00\" \"dddd dd MMM yyyy h:mm tt zzz\" \"Sunday 15 Jun 2008 8:30 AM -06:00\" \"dddd dd MMMM yyyy h:mm tt zzz\" \"Sunday 15 June 2008 8:30 AM -06:00\" Adapter date and time processing uses Microsoft datetime parsing . For more documentation on standard datetime formats, which fit most use cases, see Standard date and time format strings . For documentation on custom datetime formation, see Custom date and time format strings ."
                                                                               },
    "content/main/shared-content/configuration/text-parser/xpath-and-csv-syntax-for-value-retrieval.html":  {
                                                                                                                "href":  "content/main/shared-content/configuration/text-parser/xpath-and-csv-syntax-for-value-retrieval.html",
                                                                                                                "title":  "XPath and CSV syntax for value retrieval",
                                                                                                                "keywords":  "XPath and CSV syntax for value retrieval For information on which semantics are used for retrieving values from XML and CSV files, see the following documentation: XML - XML Path Language (XPath) CSV - Column Index (1 based) or Header value (if header defined) The following syntaxes are used to extract values from XML or CSV documents. XML - Simple XPath example \u003cvalues\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:46.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:46.0928791Z\u003c time\u003e \u003cvalue\u003e1.234567890\u003c/value\u003e \u003cvalue\u003e1.234567890\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:47.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:47.0928791Z\u003c time\u003e \u003cvalue\u003e12.34567890\u003c/value\u003e \u003cvalue\u003e12.34567890\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:48.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:48.0928791Z\u003c time\u003e \u003cvalue\u003e123.4567890\u003c/value\u003e \u003cvalue\u003e123.4567890\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:49.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:49.0928791Z\u003c time\u003e \u003cvalue\u003e1234.567890\u003c/value\u003e \u003cvalue\u003e1234.567890\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:50.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:50.0928791Z\u003c time\u003e \u003cvalue\u003e12345.67890\u003c/value\u003e \u003cvalue\u003e12345.67890\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:51.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:51.0928791Z\u003c time\u003e \u003cvalue\u003e123456.7890\u003c/value\u003e \u003cvalue\u003e123456.7890\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:52.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:52.0928791Z\u003c time\u003e \u003cvalue\u003e12345678.90\u003c/value\u003e \u003cvalue\u003e12345678.90\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003cvalue\u003e \u003ctime\u003e2020-08-10T12:10:53.0928791Z\u003c/time\u003e \u003ctime\u003e2020-08-10T12:10:53.0928791Z\u003c time\u003e \u003cvalue\u003e123456789.0\u003c/value\u003e \u003cvalue\u003e123456789.0\u003c value\u003e \u003c/value\u003e \u003c value\u003e \u003c/values\u003e \u003c values\u003e The following XPath configuration reads a series of values: { \"Id\": \"DoubleValue\", \"FieldDefinition\": \"./values/value/value\", \". values value value\", \"DataType\": \"Double\" }, { \"Id\": \"Timestamp\", \"FieldDefinition\": \"./values/value/time\", \". values value time\", \"DataType\": \"DateTime\", \"IsIndex\": true } CSV - Simple CSV column index example 2020-08-10T12:10:46.0928791Z,1.234567890 2020-08-10T12:10:47.0928791Z,12.34567890 2020-08-10T12:10:48.0928791Z,123.4567890 2020-08-10T12:10:49.0928791Z,1234.567890 2020-08-10T12:10:50.0928791Z,12345.67890 2020-08-10T12:10:51.0928791Z,123456.7890 2020-08-10T12:10:52.0928791Z,12345678.90 2020-08-10T12:10:53.0928791Z,123456789.0 The following CSV column index configuration requires the text parser be configured with HasHeader=false . The column indexes are 1 based and configured as strings. { \"Id\": \"DoubleValue\", \"FieldDefinition\": \"2\", \"DataType\": \"Double\" }, { \"Id\": \"Timestamp\", \"FieldDefinition\": \"1\", \"DataType\": \"DateTime\", \"IsIndex\": true } CSV - Simple CSV column header example Date,Value 2020-08-10T12:10:46.0928791Z,1.234567890 2020-08-10T12:10:47.0928791Z,12.34567890 2020-08-10T12:10:48.0928791Z,123.4567890 2020-08-10T12:10:49.0928791Z,1234.567890 2020-08-10T12:10:50.0928791Z,12345.67890 2020-08-10T12:10:51.0928791Z,123456.7890 2020-08-10T12:10:52.0928791Z,12345678.90 2020-08-10T12:10:53.0928791Z,123456789.0 The following CSV column header configuration requires the text parser be configured with HasHeader=true . { \"Id\": \"DoubleValue\", \"FieldDefinition\": \"Value\", \"DataType\": \"Double\" }, { \"Id\": \"Timestamp\", \"FieldDefinition\": \"Date\", \"DataType\": \"DateTime\", \"IsIndex\": true }"
                                                                                                            },
    "content/main/shared-content/diagnostics/diagnostics.html":  {
                                                                     "href":  "content/main/shared-content/diagnostics/diagnostics.html",
                                                                     "title":  "Diagnostics",
                                                                     "keywords":  "Diagnostics The adapter and its components produce various kinds of diagnostics data that is sent to all health endpoints. The System_Diagnostics.json file contains a flag that determines whether diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available diagnostics data Every minute, dynamic data is sent to configured health endpoints. The following diagnostics data are available: System Stream count IO rate Error rate"
                                                                 },
    "content/main/shared-content/diagnostics/egress.html":  {
                                                                "href":  "content/main/shared-content/diagnostics/egress.html",
                                                                "title":  "Egress",
                                                                "keywords":  "Egress The Egress component of the adapter produces the following diagnostics stream: IO rate The Diagnostics.Egress.IORate dynamic type includes the following values, which are logged in a stream with the Id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate . IORate includes only sequential data successfully sent to an egress endpoint. Property Type Description timestamp string Timestamp of event IORate double One-minute rolling average of data rate (streams/second) (streams second)"
                                                            },
    "content/main/shared-content/diagnostics/error-rate.html":  {
                                                                    "href":  "content/main/shared-content/diagnostics/error-rate.html",
                                                                    "title":  "Error rate",
                                                                    "keywords":  "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes the following values, which are logged in a stream with the Id {componentid}.ErrorRate . Property Type Description timestamp string Timestamp of event ErrorRate double One-minute rolling average of error rate (streams/second) (streams second)"
                                                                },
    "content/main/shared-content/diagnostics/io-rate.html":  {
                                                                 "href":  "content/main/shared-content/diagnostics/io-rate.html",
                                                                 "title":  "IO rate",
                                                                 "keywords":  "IO rate The Diagnostics.Adapter.IORate dynamic type includes the following values, which are logged in a stream with the Id {componentid}.IORate . IORate includes only sequential data collected from a data source. Property Type Description timestamp string Timestamp of event IORate double One-minute rolling average of data rate (streams/second) (streams second)"
                                                             },
    "content/main/shared-content/diagnostics/stream-count.html":  {
                                                                      "href":  "content/main/shared-content/diagnostics/stream-count.html",
                                                                      "title":  "Stream count",
                                                                      "keywords":  "Stream count The Diagnostics.StreamCountEvent dynamic type includes the following values, which are logged in a stream with the Id {componentid}.StreamCount . The StreamCount and TypeCount include only types and streams created for sequential data received from a data source. Property Type Description timestamp string Timestamp of event StreamCount int Number of streams created by the adapter instance TypeCount int Number of types created by the adapter instance"
                                                                  },
    "content/main/shared-content/diagnostics/system.html":  {
                                                                "href":  "content/main/shared-content/diagnostics/system.html",
                                                                "title":  "System",
                                                                "keywords":  "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the Id System.Diagnostics . This diagnostic stream contains system level information related to the host platform that the adapter is running on. Property Type Description timestamp string Timestamp of event ProcessIdentifier int Process Id of the host process StartTime string Time at which the host process started WorkingSet long Amount of physical memory in bytes, allocated for the host process TotalProcessorTime double Total processor time for the host process expressed in seconds TotalUserProcessorTime double User processor time for the host process expressed in seconds TotalPrivilegedProcessorTime double Privileged processor time for the host process expressed in seconds ThreadCount int Number of threads in the host process HandleCount int Number of handles opened by the host process ManagedMemorySize double Number of bytes currently thought to be allocated in managed memory Unit of Measure = megabytes PrivateMemorySize double Amount of paged memory in bytes allocated for the host process Unit of Measure = megabytes PeakPagedMemorySize double Maximum amount of memory in the virtual memory paging file in bytes used by the host process. Unit of Measure = megabytes StorageTotalSize double Total size of the storage medium in use by the system Unit of Measure = megabytes StorageFreeSpace double Free space available Unit of Measure = megabytes Each adapter component produces its own diagnostics streams."
                                                            },
    "content/main/shared-content/health/device-status.html":  {
                                                                  "href":  "content/main/shared-content/health/device-status.html",
                                                                  "title":  "Device status",
                                                                  "keywords":  "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of Good is expected. Property Type Description Time string Timestamp of the event DeviceStatus string The value of the DeviceStatus The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
                                                              },
    "content/main/shared-content/health/failover-health.html":  {
                                                                    "href":  "content/main/shared-content/health/failover-health.html",
                                                                    "title":  "Failover Health",
                                                                    "keywords":  "Failover Health PI Adapters produce various kinds of health data that can be egressed to different health endpoints. If an adapter has failover enabled, additional health information pertaining to failover is available. To egress health-related data, you have to configure an adapter health endpoint first. For more information, see Health endpoint configuration . Available health data Static health data Static health data is only updated when the client failover configuration is updated. For more information, see Client Failover Configuration . The following static health data is available when an adapter has failover enabled: Property Description Name The name of the node. For more information, see AF structure . Description Description of the health asset. Host The hostname of the machine. Version The current version of the failover component. Failover Group Id The FailoverGroupId of the client failover configuration. For more information, see Client Failover Configuration . Failover Mode The Mode of the client failover configuration. For more information, see Client Failover Configuration . Failover Endpoint The Endpoint of the client failover configuration. For more information, see Client Failover Configuration . Dynamic health data Dynamic data is sent every minute to configured health endpoints. The following dynamic health data is available when an adapter has failover enabled: Device status Next Health Message Expected Failover status The failover status of the adapter is logged in the diagnostics stream with the Id Failover.FailoverStatus diagnostic stream. For more information, see Failover Status ."
                                                                },
    "content/main/shared-content/health/health.html":  {
                                                           "href":  "content/main/shared-content/health/health.html",
                                                           "title":  "Health",
                                                           "keywords":  "Health PI Adapters produce various kinds of health data that can be egressed to different health endpoints. To egress health related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available health data Dynamic data is sent every minute to configured health endpoints. The following health data is available: Device status Next Health Message Expected"
                                                       },
    "content/main/shared-content/health/health-and-diagnostics.html":  {
                                                                           "href":  "content/main/shared-content/health/health-and-diagnostics.html",
                                                                           "title":  "Health and Diagnostics",
                                                                           "keywords":  "Health and Diagnostics PI Adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and that data flows to the configured OMF endpoints. For more information on available adapter health data, see health . PI Adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a health endpoint and setting EnableDiagnostics to true . You can configure EnableDiagnostics in the system\u0027s General configuration . For more information on available adapter diagnostics data, see diagnostics . In OSIsoft Cloud Services (OCS), both health and diagnostics data are created as assets. The data are available in the Asset Explorer and you can use them in the OCS Trend feature. For more information, see the OCS documentation Assets . Health endpoint differences Two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services (OCS) There are a few differences in how these two systems treat the associated health and diagnostics data. PI Web API parses the information and sends it to configured PI servers for the OMF endpoint. The static data is used to create an AF structure on a PI AF server. The dynamic health data is time-series data that is stored in PI points on a PI Data Archive. You can see it in the AF structure as PI point data reference attributes. OCS does not currently provide a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data is stored. Each value is its own stream with the timestamp property as the single index. AF structure With a health endpoint configured to a PI server, you can use PI System Explorer to view the health and diagnostics of an adapter. The element hierarchy is shown in the following image. The Elements root contains a link to an Adapters node. This is the root node for all adapter instances. Below Adapters , you will find one or more adapter nodes. Each node\u0027s title is defined by the node\u0027s corresponding computer name and service name in this format: {ComputerName}.{ServiceName} . For example, in the following image, MachineName is the computer name and OpcUa is the service name. To see the health and diagnostics values, click on an adapter node and select Attributes ."
                                                                       },
    "content/main/shared-content/health/next-health-message-expected.html":  {
                                                                                 "href":  "content/main/shared-content/health/next-health-message-expected.html",
                                                                                 "title":  "Next health message expected",
                                                                                 "keywords":  "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected is sent by an individual adapter data component on a periodic basis while it is functioning properly. This value is a timestamp that indicates when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, and so on. Property Type Description Time string Timestamp of the event NextHealthMessageExpected string Timestamp when next value is expected"
                                                                             },
    "content/main/shared-content/installation/installation.html":  {
                                                                       "href":  "content/main/shared-content/installation/installation.html",
                                                                       "title":  "Installation",
                                                                       "keywords":  "Installation Adapters are installed on a local machine using an install kit downloaded from the OSIsoft Customer Portal. For instructions on downloading and installing adapters, see Install the adapter . Alternatively, you can build custom installers or containers for Linux. For more information, see the Docker instructions in the documentation of the respective adapter."
                                                                   },
    "content/main/shared-content/installation/install-the-adapter.html":  {
                                                                              "href":  "content/main/shared-content/installation/install-the-adapter.html",
                                                                              "title":  "Install the adapter",
                                                                              "keywords":  "Install the adapter You can install adapters on either a Windows or Linux operating system. Before installing the adapter, see the respective system requirements to ensure your machine is properly configured to provide optimum adapter operation. Windows Complete the following steps to install a PI adapter on a Windows computer: Download PI-Adapter-for-Modbus_1.3.0.131-x64_.msi from the OSIsoft Customer portal . Note: Customer login credentials are required to access the portal. Run PI-Adapter-for-Modbus_1.3.0.131-x64_.msi file. Follow the setup wizard. You can change the installation folder or port number during setup. The default port number is 5590 . Optional: To verify the installation, run the following curl command with the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration http:  localhost:5590 api v1 configuration Alternatively, use the following edgecmd command: edgecmd get application If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned. Linux Complete the following steps to install an adapter on a Linux computer: Download the appropriate Linux distribution file ( PI-Adapter-for-Modbus_1.3.0.131- platform _.deb ) from the OSIsoft Customer portal . Note: Customer login credentials are required to access the portal. Open a terminal. Run the sudo apt update command to update available packages information. Run the sudo apt install command against the Linux distribution file ( PI-Adapter-for-Modbus_1.3.0.131- platform _.deb ) selected in step 1 of this procedure. For example: sudo apt install ./PI-Adapter-for-Modbus_1.3.0.131-x64_.deb . PI-Adapter-for-Modbus_1.3.0.131-x64_.deb Optional: To verify the installation, run the following curl command with the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration http:  localhost:5590 api v1 configuration Alternatively, use the following edgecmd command: edgecmd get application If you receive an error, wait a few seconds and run the command again. If the installation was successful, a JSON copy of the default system configuration is returned."
                                                                          },
    "content/main/shared-content/installation/install-using-docker.html":  {
                                                                               "href":  "content/main/shared-content/installation/install-using-docker.html",
                                                                               "title":  "Installation using Docker",
                                                                               "keywords":  "Installation using Docker Docker is a set of tools that you can use on Linux to manage application deployments. This topic provides examples of how to create a Docker container with the adapter. Note: The use of Docker is only recommended if your environment requires it. Only users proficient with Docker should use it to install the adapter. Docker is not required to use the adapter. Create a startup script To create a startup script for the adapter, follow the instructions below. Use a text editor to create a script similar to one of the following examples: Note: The script varies slightly by processor. ARM32 #!/bin/sh #! bin sh if [ -z $portnum ] ; then exec /PI-Adapter-for-Modbus_1.3.0.131-arm_/OSIsoft.Data.System.Host  PI-Adapter-for-Modbus_1.3.0.131-arm_ OSIsoft.Data.System.Host else exec /PI-Adapter-for-Modbus_1.3.0.131-arm_/OSIsoft.Data.System.Host  PI-Adapter-for-Modbus_1.3.0.131-arm_ OSIsoft.Data.System.Host --port:$portnum fi ARM64 #!/bin/sh #! bin sh if [ -z $portnum ] ; then exec /PI-Adapter-for-Modbus_1.3.0.131-arm64_/OSIsoft.Data.System.Host  PI-Adapter-for-Modbus_1.3.0.131-arm64_ OSIsoft.Data.System.Host else exec /PI-Adapter-for-Modbus_1.3.0.131-arm64_/OSIsoft.Data.System.Host  PI-Adapter-for-Modbus_1.3.0.131-arm64_ OSIsoft.Data.System.Host --port:$portnum fi AMD64 #!/bin/sh #! bin sh if [ -z $portnum ] ; then exec /PI-Adapter-for-Modbus_1.3.0.131-x64_/OSIsoft.Data.System.Host  PI-Adapter-for-Modbus_1.3.0.131-x64_ OSIsoft.Data.System.Host else exec /PI-Adapter-for-Modbus_1.3.0.131-x64_/OSIsoft.Data.System.Host  PI-Adapter-for-Modbus_1.3.0.131-x64_ OSIsoft.Data.System.Host --port:$portnum fi Name the script modbusdockerstart.sh and save it to the directory where you plan to create the container. Create a Docker container To create a Docker container that runs the adapter, follow the instructions below. Create the following Dockerfile in the directory where you want to create and run the container. Note: Dockerfile is the required name of the file. Use the variation according to your operating system: ARM32 FROM ubuntu:20.04 WORKDIR /   RUN apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY modbusdockerstart.sh /   RUN chmod +x /modbusdockerstart.sh  modbusdockerstart.sh ADD ./PI-Adapter-for-Modbus_1.3.0.131-arm_.tar.gz . PI-Adapter-for-Modbus_1.3.0.131-arm_.tar.gz . ENTRYPOINT [\"/modbusdockerstart.sh\"] [\" modbusdockerstart.sh\"] ARM64 FROM ubuntu:20.04 WORKDIR /   RUN apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY modbusdockerstart.sh /   RUN chmod +x /modbusdockerstart.sh  modbusdockerstart.sh ADD ./PI-Adapter-for-Modbus_1.3.0.131-arm64_.tar.gz . PI-Adapter-for-Modbus_1.3.0.131-arm64_.tar.gz . ENTRYPOINT [\"/modbusdockerstart.sh\"] [\" modbusdockerstart.sh\"] AMD64 (x64) FROM ubuntu:20.04 WORKDIR /   RUN apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY modbusdockerstart.sh /   RUN chmod +x /modbusdockerstart.sh  modbusdockerstart.sh ADD ./PI-Adapter-for-Modbus_1.3.0.131-x64_.tar.gz . PI-Adapter-for-Modbus_1.3.0.131-x64_.tar.gz . ENTRYPOINT [\"/modbusdockerstart.sh\"] [\" modbusdockerstart.sh\"] Copy the PI-Adapter-for-Modbus_1.3.0.131- platform _.tar.gz file to the same directory as the Dockerfile . Copy the modbusdockerstart.sh script to the same directory as the Dockerfile . Run the following command line in the same directory ( sudo may be necessary): \u003c!-- PRERELEASE REMINDER: Customize for modbusadapter. Example:bacnetadapter --\u003e docker build -t modbusadapter . Docker container startup The following procedures contain instructions on how to run the adapter inside a Docker container with different options enabled. Run the Docker container with REST access enabled To run the adapter inside a Docker container with access to its REST API from the local host, complete the following steps: Use the docker container image modbusadapter created previously. Type the following in the command line ( sudo may be necessary): docker run -d --network host modbusadapter Port 5590 is accessible from the host and you can make REST calls to the adapter from applications on the local host computer. In this example, all data stored by the adapter is stored in the container itself. When you delete the container, the stored data is also deleted. Run the Docker container with persistent storage To run the adapter inside a Docker container while using the host for persistent storage, complete the following steps. This procedure also enables access to the adapter REST API from the local host. Use the docker container image modbusadapter created previously. Type the following in the command line ( sudo may be necessary): docker run -d --network host -v /modbus:/usr/share/OSIsoft/  modbus: usr share OSIsoft  modbusadapter Port 5590 is accessible from the host and you can make REST calls to the adapter from applications on the local host computer. In this example, all data that is written to the container is instead written to the host directory and the host directory is a directory on the local machine, \u003c!-- customize --\u003e /modbus  modbus . You can specify any directory. Change port number To use a different port other than 5590 , you can specify a portnum variable on the docker run command line. For example, to start the adapter using port 6000 instead of 5590 , use the following command: docker run -d -e portnum=6000 --network host modbusadapter This command accesses the REST API with port 6000 instead of port 5590 . The following curl command returns the configuration for the container. curl http://localhost:6000/api/v1/configuration http:  localhost:6000 api v1 configuration OR edgecmd -port 6000 get application Remove REST access If you remove the --network host option from the docker run command, REST access is not possible from outside the container. This may be of value where you want to host an application in the same container as the adapter but do not want to have external REST access enabled."
                                                                           },
    "content/main/shared-content/installation/system-requirements.html":  {
                                                                              "href":  "content/main/shared-content/installation/system-requirements.html",
                                                                              "title":  "System requirements",
                                                                              "keywords":  "System requirements PI Adapter for Modbus TCP is supported on a variety of platforms and processors. Install kits are available for the following platforms: Operating System Platform Installation Kit Processor(s) Windows 10 Enterprise Windows 10 IoT Enterprise x64 PI-Adapter-for-Modbus_1.3.0.131-x64_.msi Intel/AMD Intel AMD 64-bit processors Debian 10, 11 Ubuntu 20.04, 22.04 x64 PI-Adapter-for-Modbus_1.3.0.131-x64_.deb Intel/AMD Intel AMD 64-bit processors Debian 10, 11 Ubuntu 22.04 ARM32 PI-Adapter-for-Modbus_1.3.0.131-arm_.deb ARM 32-bit processors Debian 10 Ubuntu 22.04 ARM64 PI-Adapter-for-Modbus_1.3.0.131-arm64_.deb ARM 64-bit processors Alternatively, you can use tar.gz files with binaries to build your own custom installers or containers for Linux. For more information on installing the adapter with Docker containers, see Installation using Docker . Visual C++ Redistributable For Windows installations, the Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017, 2019, and 2022 is required and installed by the PI Adapter for Modbus TCP installation kit. It is recommended that you manually install the latest supported Microsoft Visual C++ Redistributable prior to PI Adapter for Modbus TCP installation in order to receive automatic updates. PI Web API compatibility This version of PI Adapter for Modbus TCP is compatible with PI Web API 2021 and later."
                                                                          },
    "content/main/shared-content/installation/uninstall-the-adapter.html":  {
                                                                                "href":  "content/main/shared-content/installation/uninstall-the-adapter.html",
                                                                                "title":  "Uninstall the adapter",
                                                                                "keywords":  "Uninstall the adapter Complete the procedure corresponding to your specific operating system to uninstall the adapter: Windows To delete the PI adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not deleted by the uninstall process. Optional: To delete data, configuration, and log files, delete the directory: %ProgramData%\\OSIsoft\\Adapters\\Modbus1 This deletes all data processed by the adapter, in addition to the configuration and log files. Linux To delete PI Adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove pi.adapter.Modbus Optional: To delete data, configuration, and log files, run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/Modbus  usr share OSIsoft Adapters Modbus This deletes all data processed by the adapter, in addition to the configuration and log files."
                                                                            },
    "content/main/shared-content/installation/upgrade-the-adapter.html":  {
                                                                              "href":  "content/main/shared-content/installation/upgrade-the-adapter.html",
                                                                              "title":  "Upgrade the adapter",
                                                                              "keywords":  "Upgrade the adapter When a new version of the adapter is released, you can upgrade to the latest version by running the new installation package. Windows upgrade Complete the following steps to upgrade a PI adapter on a Windows computer: Download PI-Adapter-for-Modbus_1.3.0.131-x64_.msi from the OSIsoft Customer Portal . Note: Customer login credentials are required to access the portal. Run PI-Adapter-for-Modbus_1.3.0.131-x64_.msi . Complete the setup wizard. Optional: To verify the upgrade, run the following curl command with the port number that you specified when completing the wizard: curl -X GET \"http://localhost:5590/api/v1/Diagnostics/ProductInformation\" \"http:  localhost:5590 api v1 Diagnostics ProductInformation\" Alternatively, use the following edgecmd command: edgecmd get version Upon successful upgrade, the JSON response lists the updated application version: { \"Application Version\": \"1.3.0.131\", //    upgraded version \".Net Core Version\": \".NET Core 3.1.15\", \"Operating System\": \"Microsoft Windows 10.0.19041\" } Linux upgrade Complete the following steps to upgrade a PI adapter on a Linux computer: Download the appropriate Linux distribution file from the OSIsoft Customer Portal . Note: Customer login credentials are required to access the portal. Open a terminal session. Move the Linux distribution file to the target host and run the sudo apt upgrade command. Platform Command Linux x64 sudo apt upgrade ./PI-Adapter-for-Modbus_1.3.0.131-x64_.deb . PI-Adapter-for-Modbus_1.3.0.131-x64_.deb Linux ARM32 Debian sudo apt upgrade ./PI-Adapter-for-Modbus_1.3.0.131-arm_.deb . PI-Adapter-for-Modbus_1.3.0.131-arm_.deb Linux ARM64 Debian sudo apt upgrade ./PI-Adapter-for-Modbus_1.3.0.131-arm64_.deb . PI-Adapter-for-Modbus_1.3.0.131-arm64_.deb Optional: To verify the upgrade, run the following curl command with the port number that you specified: curl -X GET \"http://localhost:5590/api/v1/Diagnostics/ProductInformation\" \"http:  localhost:5590 api v1 Diagnostics ProductInformation\" Alternatively, use the following edgecmd command: edgecmd get version Upon successful upgrade, the JSON response lists the updated application version: { \"Application Version\": \"1.3.0.131\", //    upgraded version \".Net Core Version\": \".NET Core 3.1.15\", \"Operating System\": \"Microsoft Windows 10.0.19041\" }"
                                                                          },
    "content/main/shared-content/introduction/intro-to-pi-adapters.html":  {
                                                                               "href":  "content/main/shared-content/introduction/intro-to-pi-adapters.html",
                                                                               "title":  "PI Adapter for Modbus TCP 1.5",
                                                                               "keywords":  "PI Adapter for Modbus TCP 1.5 PI Adapter for Modbus TCP is a data collection technology that collects time-series operations data from a data source over the protocol and then sends it to a supported storage location in the Open Message Format (OMF). \u003c!-- Add content about the protocol here --\u003e PI Adapter for Modbus TCP data flow The following diagram depicts the collection and processing of data for an operational PI Adapter for Modbus TCP, collecting and processing data. Refer to the list below the diagram for more information on each callout depicted. \u003c!-- Mark Bishop 3/3/22: 3 3 22: The SVG file referenced below can be opened and edited using https://app.diagrams.net/ https:  app.diagrams.net  --\u003e The user installs and configures PI Adapter for Modbus TCP on a host system. You can configure the adapter using either a REST interface or EdgeCmd, a command line utility specifically designed for interfacing with edge systems. The adapter collects data from assets over the protocol, a process known as data ingress . The adapter converts ingress data to the Open Message Format (OMF), a format that supported storage locations understand. The adapter sends OMF data to a supported storage location in a process known as data egress . Supported egress endpoints include: PI Server OSIsoft Cloud Services"
                                                                           },
    "content/main/shared-content/metadata/metadata.html":  {
                                                               "href":  "content/main/shared-content/metadata/metadata.html",
                                                               "title":  "Metadata",
                                                               "keywords":  "Metadata If the metadataLevel is set to Low , Medium , or High in the General configuration , adapter streams created by the ingress components include the following metadata: Datasource: {ComponentId} AdapterType: {ComponentType} ComponentId corresponds to the adapter components\u0027 data source configured in the Components configuration . ComponentType corresponds to the adapter type. Metadata for health and diagnostics streams If you configure a health endpoint and enable metadata, they are included in the health streams ( Device status and Next health message expected ) together with ComponentId and ComponentType . If you enable diagnostics in General configuration , metadata are included in the diagnostics streams ( Stream count , IO rate , Error rate ) together with ComponentId and ComponentType . The adapter may also send its own stream metadata not including health and diagnostics streams. For more information about what custom metadata is included in each stream, see the user guide for your adapter. Note: Metadata is only sent for streams created by the ingress components. Currently, the only endpoint that persists sent metadata is OCS (OSIsoft Cloud Services)."
                                                           },
    "content/main/shared-content/technical-support-and-feedback.html":  {
                                                                            "href":  "content/main/shared-content/technical-support-and-feedback.html",
                                                                            "title":  "Technical support and feedback",
                                                                            "keywords":  "Technical support and feedback OSIsoft provides several ways to report issues and provide feedback on PI Adapters. Technical support For technical assistance with PI Adapters, contact OSIsoft Technical Support through the OSIsoft Customer Portal . We can help you identify the problem, provide workarounds and address any concerns you may have. Remote access to your facilities may be necessary during the session. Note: You must have an account set up in the OSIsoft Customer Portal before you can open a case. If you do not have a portal account, see How to Get a Login to OSIsoft Customer Portal . Alternatively, call OSIsoft Technical Support at +1 510-297-5828. When you contact OSIsoft Technical Support, be prepared to provide this information: Product name, version, and build numbers Details about your computer platform (CPU type, operating system, and version number) Time that the difficulty started Log files at that time Details of any environment changes prior to the start of the issue Summary of the issue, including any relevant log files during the time the issue occurred \u003c!--To view a brief primer on PI Adapters, see the [PI Adapters playbook](https://customers.osisoft.com/s/knowledgearticle?knowledgeArticleUrl=Playbook-PI-adapters) playbook](https:  customers.osisoft.com s knowledgearticle?knowledgeArticleUrl=Playbook-PI-adapters) in the OSIsoft Customer Portal.--\u003e Product feedback To submit product feedback for PI Adapters, visit the PI Adapters feedback page . The product team at OSIsoft regularly monitors the page. Documentation feedback To submit documentation feedback for PI Adapters, send an email to documentation@aveva.com . Be sure to include the following information with your feedback: Product name and version Documentation topic URL Details of the suggestion or error The technical documentation team will review and address your feedback in future documentation updates."
                                                                        },
    "content/main/shared-content/troubleshooting/troubleshooting.html":  {
                                                                             "href":  "content/main/shared-content/troubleshooting/troubleshooting.html",
                                                                             "title":  "Troubleshooting",
                                                                             "keywords":  "Troubleshooting PI adapters provide features for troubleshooting issues related to connectivity, data flow, and configuration. Resources include adapter logs and the Wireshark troubleshooting tool . If you are still unable to resolve issues or need additional guidance, contact OSIsoft Technical Support through the OSIsoft Customer Portal . Note: Make sure to also check the troubleshooting information specific to your adapter in this user guide. Logs Messages from the System and OmfEgress logs provide information on the status of the adapter. For example, they show if a connection from the adapter to an egress endpoint exists. Perform the following steps to view the System and OmfEgress logs: Navigate to the logs directory: Windows: %ProgramData%\\OSIsoft\\Adapters\\\u003cAdapterName\u003e\\Logs Linux: /usr/share/OSIsoft/Adapters/\u003cAdapterName\u003e/Logs  usr share OSIsoft Adapters \u003cAdapterName\u003e Logs . Example: A successful connection to a PI Web API egress endpoint displays the following message in the OmfEgress log: 2020-11-02 11:08:51.870 -06:00 [Information] Data will be sent to the following OMF endpoint: Id: \u003comfegress id\u003e Endpoint: \u003cpi web api URL\u003e (note: the pi web api default port is 443) ValidateEndpointCertificate: \u003ctrue or false\u003e Optional: Change the log level of the adapter to receive more information and context. For more information, see Logging configuration . ASP .NET Core platform log The ASP .NET Core platform log provides information from the Kestrel web server that hosts the application. The log could contain information that the adapter is overloaded with incoming data. Perform the following steps to spread the load among multiple adapters: Decrease the scan frequency. Lower the amount of data selection items. Wireshark Wireshark is a protocol-specific troubleshooting tool that supports all current adapter protocols. Perform the following steps if you want to use Wireshark to capture traffic from the data source to the adapter or from the adapter to the OMF destination. Download Wireshark . Familiarize yourself with the tool and read the Wireshark user guide . Health and diagnostics egress to PI Web API The adapter sends health and diagnostics data to PI Web API; in some cases, conflicts may occur that are due to changes or perceived changes in PI Web API. For example, a 409 - Conflict error message displays if you upgrade your adapter version and the PI points do not match in the upgraded version. However, data is continued to be sent as long as containers are created, so buffering only starts if no containers are created. To resolve the conflict, perform the following steps: Stop the adapter. Delete the Health folder inside of the Buffers folder. Stop PI Web API. Delete the relevant adapter created AF structure. Delete the associated health and diagnostics PI points on any or all PI Data Archives created by PI Web API. Start PI Web API. Start the adapter. Adapter connection to egress endpoint Certain egress health information in both PI Web API and OCS show if an adapter connection to an egress endpoint exists. To verify an active connection, perform one of the following procedures: PI Web API connection Perform the following steps to determine if a connection to the PI Web API endpoint exists: Open PI Web API. Select the OmfEgress component of your adapter, for example GVAdapterUbuntu.\u003cAdapterName\u003e.OmfEgress . Make sure that the following PI points have been created for your egress endpoint: DeviceStatus NextHealthMessageExpected IORate OCS connection Perform the following steps to determine if a connection to the OCS endpoint exists: Open OCS. Click Sequential Data Store \u003e Streams . Makes sure that the following streams have been created for your egress endpoint: DeviceStatus NextHealthMessageExpected IORate TCP connection Perform the following steps to see all established TCP sessions in Linux: Open a terminal. Type the following command: ss -o state established -t -p Press Enter."
                                                                         },
    "content/overview/principles-of-operation.html":  {
                                                          "href":  "content/overview/principles-of-operation.html",
                                                          "title":  "Principles of operation",
                                                          "keywords":  "Principles of operation This adapter\u0027s operations focus on data collection and stream creation. Adapter configuration For the Modbus TCP adapter to start data collection, configure the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Select Modbus TCP items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more details, see PI Adapter for Modbus TCP data source configuration and PI Adapter for Modbus TCP data selection configuration . Connection The adapter communicates with the Modbus TCP devices through the TCP/IP TCP IP network by sending request packets that are constructed based on the data selection configurations. It collects the response packets returned by the devices. Data collection The adapter collects data from the Modbus TCP devices at the polling rates that you specify. The rates are set in each of the data selection configurations and can range from 0 milliseconds (as fast as possible) up to 1 day per polling. The adapter automatically optimizes the data collection process by grouping the requests to reduce the I/O I O load imposed on the Modbus TCP networks. For more information see PI Adapter for Modbus TCP data selection configuration . Data types The adapter converts readings from single or multiple registers into the data types specified by the data type code and populates the value into streams. The following table lists all data types with their corresponding type codes supported by the adapter. Data type code Data type name Value type Register type Description 1 Boolean Boolean Bool 0 = false 1 = true 10 Int16 Int16 Any Read 1 Modbus TCP register 1 and interpret as a 16-bit integer. Bytes [BA] read from the device are stored as [AB]. 2 20 UInt16 UInt16 Any Read 1 Modbus TCP register 1 and interpret as an unsigned 16-bit integer. Bytes [BA] read from the device are stored as [AB]. 2 30 Int32 Int32 Holding16 /   Input16 Read 32 bits from the Modbus TCP device and interpret as a 32-bit integer. Bytes [DCBA] read from the device are stored as [ABCD]. 2 31 Int32ByteSwap Int32 Holding16 /   Input16 Read 32 bits from the Modbus TCP device and interpret as a 32-bit integer. Bytes [BADC] read from the device are stored as [ABCD]. 2 100 Float32 Float32 Holding16 /   Input16 Read 32 bits from the Modbus TCP device and interpret as a 32-bit float. Bytes [DCBA] read from the device are stored as [ABCD]. 2 101 Float32ByteSwap Float32 Holding16 /   Input16 Read 32 bits from the Modbus TCP device and interpret as a 32-bit float. Bytes [BADC] read from the device are stored as [ABCD]. 2 110 Float64 Float64 Holding16 /   Input16 Read 64 bits from the Modbus TCP device and interpret as a 64-bit float. Bytes [HGFEDCBA] read from the device are stored as [ABCDEFGH]. 2 111 Float64ByteSwap Float64 Holding16 /   Input16 Read 64 bits from the Modbus TCP device and interpret as a 64-bit float. Bytes [BADCFEHG] read from the device are stored as [ABCDEFGH]. 2 1001 - 1250 String String Holding16 /   Input16 1001 reads a one-character string, 1002 reads a two-character string, and 1003 reads a three-character string and so on. Bytes [AB] are interpreted as \"AB\". 2001 - 2250 StringByteSwap String Holding16 /   Input16 2001 reads a one-character string, 2002 reads a two-character string, and 2003 reads a three-character string and so on. Bytes [BA] are interpreted as \"AB\". 1 For more information about Modbus TCP registers, see How is data stored in Standard Modbus? (https://www.se.com/us/en/faqs/FA168406/) (https:  www.se.com us en faqs FA168406 ) 2 Bytes are read in reverse order. Stream creation The Modbus TCP adapter creates a stream with two properties for each selected Modbus TCP item. The properties are described in the following table. Property name Data type Description Timestamp String The response time of the stream data from the Modbus TCP device Value Specified by the data selection The value of the stream data from the Modbus TCP device Certain metadata are sent with each stream created. The following metadata are common for every adapter type: ComponentId : Specifies the data source, for example, Modbus1 ComponentType : Specifies the type of adapter, for example, Modbus Each stream created for the selected measurement has a unique identifier (stream ID). If you specify a custom stream ID for the measurement in the data selection configuration, the adapter uses that stream ID to create the stream. Otherwise, the adapter constructs the stream ID using the following format: \u003cAdapterComponentID\u003e.\u003cDevice ID\u003e.\u003cUnit ID\u003e.\u003cRegister Type\u003e.\u003cRegister Offset\u003e Note: Naming convention is affected by StreamIdPrefix and DefaultStreamIdPattern settings in the data source configuration. For more information, see PI Adapter for Modbus TCP data source configuration . Client Failover The Modbus TCP adapter supports client failover. Two adapters can be configured as part of a redundant group so that in the event of a connection loss to the failover endpoint or data source, or one or more components are stopped, the secondary adapter may take the place of the primary. Since multiple devices are allowed in the data source configuration, both adapters report to the failover endpoint the portion of devices to which they are currently connected. In the event that one adapter is connected to a higher portion of configured devices than the other, that adapter will be the primary. There are three client failover modes that the adapters can be configured to use: cold, warm and hot. These modes are detailed below. For more information about configuring client failover see Client failover configuration . Cold If the adapters are operating in cold mode, the secondary adapter is configured but not started. Once a failover event occurs, the secondary will become primary and will then begin to collect and egress data. Warm When the adapters are configured in warm mode, the component is started and connected to the data source, but it is not collecting or egressing any data. Once a failover event occurs, the secondary will become primary and begin to collect and egress data. Hot In hot mode, both adapters are configured and started. They both collect and buffer data, but only the primary egresses data to the endpoint. When the secondary adapter becomes primary, it will send its buffered data to the endpoint."
                                                      },
    "content/overview/supported-features.html":  {
                                                     "href":  "content/overview/supported-features.html",
                                                     "title":  "Supported features",
                                                     "keywords":  "Supported features For certain data types, the adapter supports applying bitmaps and applying data conversion. Bitmap application The adapter supports applying bitmaps to the value converted from reading the Modbus TCP devices. A bitmap is a series of numbers used to extract and reorder bits from a word register. The format of the bitmap is uuvvwwxxyyzz , where uu , vv , ww , xx , yy , and zz each refer to a single bit. Bitmaps require a leading zero if the referenced bit is less than 10. The low-order bit is 01 and high-order bit is either 16 or 32. Bitmaps can reference up to 16 bits for a 16-bit word (data types 10 and 20) and up to 32 bits for a 32-bit word (data types 30 and 31). For example, the bitmap 0307120802 maps the second bit of the original word to the first bit of the new word, the eighth bit to the second bit, the twelfth bit to the third bit, the seventh bit to the fourth bit, and the third bit to the fifth bit. The high-order bits of the new word are padded with zeros if they are not specified. Not all data types support bitmapping. The data types that support bitmaps include: Int16 (Data type code 10 ) UInt16 (Data type code 20 ) Int32 (Data type code 30 and 31 ) Data conversion application The adapter supports applying data conversion to the value converted from reading Modbus TCP devices. You can specify a conversion factor and conversion offset. The conversion factor is used for scaling the value up or down and the conversion offset is used for shifting the value. The mathematical equation for conversion is represented below: \u003cAfter Conversion\u003e = \u003cBefore Conversion\u003e /   Factor - Offset Not all data types support applying data conversion. The following data types support conversion: Int16 (Data type code 10 ) UInt16 (Data type code 20 ) Int32 (Data type code 30 and 31 ) Float32 (Data type code 100 and 101 ) The value with data conversion applied is always converted to the 32-bit float type to maintain the precision of the conversion factor and conversion offset."
                                                 },
    "content/pi-adapter-for-modbus-tcp-overview.html":  {
                                                            "href":  "content/pi-adapter-for-modbus-tcp-overview.html",
                                                            "title":  "PI Adapter for Modbus TCP overview",
                                                            "keywords":  "PI Adapter for Modbus TCP overview PI Adapter for Modbus TCP is a data-collection component that transfers time-series data from source devices to OMF endpoints in OSIsoft Cloud Services or PI Servers. Modbus TCP is a commonly available communication protocol used for connecting and transmitting information between industrial electronic devices. The adapter can connect to any device that uses the Modbus TCP communication protocol. Adapter installation You can install the adapter with a download kit that you can obtain from the OSIsoft Customer Portal. You can install the adapter on devices running either Windows or Linux operating systems. Adapter configuration Using REST API, you can configure all functions of the adapter. The configurations are stored in JSON files. For data ingress, you must define an adapter component in the system components configuration for each device to which the adapter will connect. You configure each adapter component with the connection information for the device and the data to collect. For data egress, you must specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once you have configured the adapter and it is sending data, you can use administration functions to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. EdgeCmd utility OSIsoft also provides the EdgeCmd utility, a proprietary command line tool to configure and administer an adapter on both Linux and Windows operating systems. EdgeCmd utility is installed separately from the adapter."
                                                        },
    "content/release-notes/release-notes.html":  {
                                                     "href":  "content/release-notes/release-notes.html",
                                                     "title":  "Release notes",
                                                     "keywords":  "Release notes PI Adapter for Modbus TCP 1.5 Adapter framework 1.4 Overview PI Adapter for Modbus TCP collects time series data and relevant metadata from Modbus TCP devices and sends it to configured OMF endpoints such as PI Web API and OSIsoft Cloud Services. PI Adapter for Modbus TCP can also collect health and diagnostics information. It supports buffering, polled data collection, and various Windows and Linux-based operating systems as well as containerization. For more information see PI Adapter for Modbus TCP overview . Fixes and enhancements Fixes In previous versions of the adapter, data would be collected for selection items with \"selected\": false . This issue has been resolved. Enhancements Updated to .NET 6 Known issues There are no known issues at this time. Setup System requirements Refer to System requirements . Installation and upgrade Refer to Install the adapter and Upgrade Considerations . Uninstallation Refer to Uninstall the adapter . Security information and guidance OSIsoft\u0027s commitment Because the PI System often serves as a barrier protecting control system networks and mission-critical infrastructure assets, OSIsoft is committed to (1) delivering a high-quality product and (2) communicating clearly what security issues have been addressed. This release of PI Adapter for Modbus TCP is the highest quality and most secure version of the PI Adapter for Modbus TCP released to date. OSIsoft\u0027s commitment to improving the PI System is ongoing, and each future version should raise the quality and security bar even further. Vulnerability communication The practice of publicly disclosing internally discovered vulnerabilities is consistent with the Common Industrial Control System Vulnerability Disclosure Framework developed by the Industrial Control Systems Joint Working Group (ICSJWG) . Despite the increased risk posed by greater transparency, OSIsoft is sharing this information to help you make an informed decision about when to upgrade to ensure your PI System has the best available protection. For more information, refer to OSIsoft\u0027s Ethical Disclosure Policy (https://www.osisoft.com/ethical-disclosure-policy) (https:  www.osisoft.com ethical-disclosure-policy) . To report a security vulnerability, refer to OSIsoft\u0027s Report a Security Vulnerability (https://www.osisoft.com/report-a-security-vulnerability) (https:  www.osisoft.com report-a-security-vulnerability) . Vulnerability scoring OSIsoft has selected the Common Vulnerability Scoring System (CVSS) to quantify the severity of security vulnerabilities for disclosure. To calculate the CVSS scores, OSIsoft uses the National Vulnerability Database (NVD) calculator maintained by the National Institute of Standards and Technology (NIST). OSIsoft uses Critical, High, Medium and Low categories to aggregate the CVSS Base scores. This removes some of the opinion-related errors of CVSS scoring. As noted in the CVSS specification , Base scores range from 0 for the lowest severity to 10 for the highest severity. Overview of new vulnerabilities found or fixed This section is intended to provide relevant security-related information to guide your installation or upgrade decision. OSIsoft is proactively disclosing aggregate information about the number and severity of PI Adapter for Modbus TCP security vulnerabilities that are fixed in this release. The Adapter\u0027s utilization of zlib through .NET 6 does not expose CVE-2018-25032 or CVE-2022-37434. Documentation overview EdgeCmd utility: Provides an overview on how to configure and administer PI adapters on Linux and Windows using command line arguments. Technical support and resources Refer to Technical support and feedback ."
                                                 },
    "content/troubleshooting/troubleshoot-pi-adapter-for-modbus-tcp.html":  {
                                                                                "href":  "content/troubleshooting/troubleshoot-pi-adapter-for-modbus-tcp.html",
                                                                                "title":  "Troubleshoot PI Adapter for Modbus TCP",
                                                                                "keywords":  "Troubleshoot PI Adapter for Modbus TCP PI Adapter for Modbus TCP provides troubleshooting features that enable you to verify adapter configuration, confirm connectivity, and view message logs. If you are unable to resolve issues with the adapter or need additional guidance, contact OSIsoft Technical Support through the OSIsoft Customer Portal . Check configurations Incorrect configurations can interrupt data flow and cause errors in values and ranges. Perform the following steps confirm correct configuration for your adapter. Navigate to data source configuration and verify that each configured device IP address and port are correct. Navigate to data selection configuration and verify the following for each configured data selection item below: DeviceId - The referenced device exists in the data source configuration. A non-existent or incorrect DeviceId causes the adapter to not find the data source device. UnitId - The correct UnitId number is referenced. An incorrect UnitId number can cause the adapter to request data from a different or non-existent device. RegisterType - The correct RegisterType number or string is referenced. An incorrect RegisterType number or string can cause the adapter to not read the correct register groups. RegisterOffset - The correct RegisterOffset number is referenced. An incorrect RegisterOffset number can cause the adapter to request or incorrectly interpret data locations, which results in unexpected values or out-of-range errors. DataTypeCode - The correct DataTypeCode number is referenced. An incorrect DataTypeCode number can cause unexpected values or out-of-range errors. ScheduleId - The referenced schedule exists. A non-existent referenced schedule uses a default schedule instead. DataFilterId - If configured, verify the referenced data filter exists. A non-existent or incorrect DataFilterId means that data filtering is not active. BitMap - If configured, verify the BitMap is correct. An incorrect bitmap can cause unexpected values. Navigate to egress endpoints configuration and verify each configured endpoint\u0027s Endpoint property and credentials are correct. For a PI server endpoint, verify UserName and Password . For an OCS endpoint, verify ClientId and ClientSecret . Check connectivity Perform the following steps to verify active connections to the data source and egress endpoints. Start PI Web API and verify that the PI point values are updating or start OCS and verify that the stream values are updating. If configured, use a health endpoint to determine the status of the adapter. For more information, see Health and diagnostics . Check logs Perform the following steps to view the adapter and endpoint logs to isolate issues for resolution. Navigate to the logs directory: Windows: %ProgramData%\\OSIsoft\\Adapters\\Modbus\\Logs Linux: /usr/share/OSIsoft/Adapters/Modbus/Logs  usr share OSIsoft Adapters Modbus Logs . Optional: Change the log level of the adapter to receive more information and context. For more information, see Logging configuration . Simulators Download an online Modbus simulator as a data source to troubleshoot the adapter. For example, Mod_RSSim ."
                                                                            },
    "content/upgrade-considerations.html":  {
                                                "href":  "content/upgrade-considerations.html",
                                                "title":  "Special considerations for upgrdading existing installations of PI Adapter for Modbus",
                                                "keywords":  "Special considerations for upgrdading existing installations of PI Adapter for Modbus Upgrading from version 1.4.x or older to version 1.5.x or newer Input32 and Holding32 Register Types In alignment with the Modbus specification, direct support for 32-bit registers has been removed from PI Adapter for Modbus TPC 1.5.x and later. Collecting 32-bit (or larger) values is still possible with PI Adapter for Modbus TPC 1.5.x by configuring different data type codes, where the values collected will be made up of two (or more) 16-bit registers. Connect Timeout PI Adapter for Modbus should transparently maintain a TCP connection without users needing to worry about specific timeout configurations. Typically, a configurable application-layer level timeout (such as the RequestTimeout in the data source configuration) is sufficient to account for any special cases a modbus device may require. However, if specific timeout settings at the TCP layer must be made, please refer to the OS documentation for potential adjustments. Simultaneous Requests PI Adapter for Modbus TPC 1.5.x and later no longer supports a configurable number of simultaneous requests, as many Modbus devices do not allow multiple connections. In consideration of this change, PI Adapter for Modbus TPC 1.5.x and later includes significant performance improvements for single connections. Alternatively, users may configure multiple adapter components with the same device configuration or configure multiple devices with different hostnames that all resolve to the same physical Modbus device."
                                            },
    "README.html":  {
                        "href":  "README.html",
                        "title":  "PI Adapter for Modbus TCP",
                        "keywords":  "PI Adapter for Modbus TCP PI Adapter for Modbus TCP is a data-collection component that transfers time-series data from source devices to OMF (OSIsoft Message Format) endpoints in OSIsoft Cloud Services or PI Servers. This repository contains the documentation for PI Adapter for Modbus TCP. You can access a readable version of this documentation here. Subtree This documentation repository consumes the PI-Adapter repository as a subtree. This repository contains a documentation framework for adapters. This subtree should be updated periodically. To update the subtree, enter the following command: git subtree pull --prefix content/main content main https://github.com/osisoft/PI-Adapter https:  github.com osisoft PI-Adapter main --squash License ?? 2019 - 2021 OSIsoft, LLC. All rights reserved. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 http:  www.apache.org licenses LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
                    }
}
